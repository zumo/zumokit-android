// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from user.djinni

package money.zumo.zumokit;

import java.util.ArrayList;
import java.util.concurrent.atomic.AtomicBoolean;

/**
 * User class provides methods for managing user wallet and accounts.
 * <p>
 * User instance can be obtained via <code>getUser</code> method on @link ZumoKit instance.
 * <p>
 * See <a href="https://developers.zumo.money/docs/guides/manage-user-wallet">Manage User Wallet</a>,
 * <a href="https://developers.zumo.money/docs/guides/create-fiat-account">Create Fiat Account</a> and
 * <a href="https://developers.zumo.money/docs/guides/view-user-data">View User Data</a>
 * guides for usage details.
 */
public interface User {
    /**
     * Get user id.
     * @return user id
     */
    public String getId();

    /**
     * Check if user has wallet
     * @return true if user has wallet
     */
    public boolean hasWallet();

    /**
     * Check if user is currenly active user. Only one user can be active at a time.
     * @return true if user is currenly active user
     */
    public boolean isActiveUser();

    /**
     * Check if user is a Modulr customer on 'MAINNET' or 'TESTNET' network.
     * @param  network 'MAINNET' or 'TESTNET'
     * @return true if user is currenly active user.
     * @see    network_type
     */
    public boolean isModulrCustomer(String network);

    /**
     * Make user Modulr customer on specified network by providing user's personal details.
     * @param  network        'MAINNET' or 'TESTNET'
     * @param  firstName     first name
     * @param  middleName    middle name or null
     * @param  lastName      last name
     * @param  dateOfBirth  date of birth in ISO 8601 format, e.g '2020-08-12'
     * @param  phone          phone number
     * @param  addressLine1 address line 1
     * @param  addressLine2 adress line 2 or null
     * @param  country        country code in ISO 3166-1 Alpha-2 format, e.g. 'GB'
     * @param  postCode      post code
     * @param  postTown      post town
     * @param callback        an interface to receive the result or error
     * @see    network_type
     */
    public void makeModulrCustomer(String network, String firstName, String middleName, String lastName, String dateOfBirth, String email, String phone, String addressLine1, String addressLine2, String country, String postCode, String postTown, SuccessCallback callback);

    /**
     * Create fiat account on specified network and currency code. User must already be Modulr customer on specified network.
     * @param  network        'MAINNET' or 'TESTNET'
     * @param  currencyCode  country code in ISO 4217 format, e.g. 'GBP'
     * @param  callback       an interface to receive the result or error
     * @see    account
     * @see    network_type
     */
    public void createFiatAccount(String network, String currencyCode, AccountCallback callback);

    /**
     * Get nominated account details for specified account if it exists.
     * Refer to
     * <a href="https://developers.zumo.money/docs/guides/send-transactions#bitcoin">Create Fiat Account</a>
     * for explanation about nominated account.
     * @param  accountId     @link Account id
     * @param  callback       an interface to receive the result or error
     * @see account_fiat_properties
     */
    public void getNominatedAccountFiatProperties(String accountId, AccountFiatPropertiesCallback callback);

    /**
     * Create user wallet seeded by provided mnemonic and encrypted with user's password.
     * <p>
     * Mnemonic can be generated by <code>generateMnemonic</code> method in @link utils class.
     * @param  mnemonic       mnemonic seed phrase
     * @param  password       user provided password
     * @param  callback       an interface to receive the result or error
     * @see    wallet
     */
    public void createWallet(String mnemonic, String password, WalletCallback callback);

    /**
     * Unlock user wallet with user's password.
     * @param  password       user provided password
     * @param  callback       an interface to receive the result or error
     * @see    wallet
     */
    public void unlockWallet(String password, WalletCallback callback);

    /**
     * Reveal menmonic seed phrase used to seed user wallet.
     * @param  password       user provided password
     * @param  callback       an interface to receive the result or error
     */
    public void revealMnemonic(String password, MnemonicCallback callback);

    /**
     * Check if mnemonic seed phrase corresponds to user's wallet.
     * This is useful for validating seed phrase before trying to recover wallet.
     * @param  mnemonic       mnemonic seed phrase
     * @return true if mnemonic seed phrase corresponds to user's wallet
     */
    public boolean isRecoveryMnemonic(String mnemonic);

    /**
     * Recover user wallet with mnemonic seed phrase corresponding to user's wallet.
     * This can be used if user forgets his password or wants to change his wallet password.
     * @param  mnemonic       mnemonic seed phrase corresponding to user's wallet
     * @param  password       user provided password
     * @param  callback       an interface to receive the result or error
     */
    public void recoverWallet(String mnemonic, String password, WalletCallback callback);

    /**
     * Get account in specific currency, on specific network, with specific type.
     * @param  currencyCode       currency code, e.g. 'BTC', 'ETH' or 'GBP'
     * @param  network             network type, e.g. 'MAINNET', 'TESTNET' or 'RINKEBY'
     * @param  type                account type, e.g. 'STANDARD', 'COMPATIBILITY' or 'SEGWIT'
     * @return account with selected parameters if it exists, null otherwise
     * @see currencyCode
     * @see network_type
     * @see account_type
     */
    public Account getAccount(String currencyCode, String network, String type);

    /**
     * Get all user accounts.
     * @return all user accounts
     */
    public ArrayList<Account> getAccounts();

    /**
     * Get account transactions for specified account.
     * @param accountId @link account identifier
     * @return all transactions corresponding to specified account
     */
    public ArrayList<Transaction> getAccountTransactions(String accountId);

    /**
     * Get all user transactions.
     * @return all user transactions
     */
    public ArrayList<Transaction> getTransactions();

    /**
     * Get transaction with specific transaction identifier if such transaction exists.
     * @param transactionId @link transaction identifier
     * @return transaction with specified identifier if exists, null otherwise
     */
    public Transaction getTransaction(String transactionId);

    /**
     * Get all user exchanges.
     * @return all user exchanges
     */
    public ArrayList<Exchange> getExchanges();

    /**
     * Get exchange associated with selected transaction if such exchange exists.
     * @return exchange associated with selected transaction if such exchange exists
     */
    public Exchange getExchangeByTransactionId(String transactionId);

    /**
     * Listen to all user changes.
     * @param listener interface to listen to user changes
     */
    public void addListener(UserListener listener);

    /**
     * Remove listener to user changes.
     * @param listener interface to listen to user changes
     */
    public void removeListener(UserListener listener);

    /**
     * Listen to all account changes for specific account.
     * @param accountId @link account identifier
     * @param listener   interface to listen to account changes
     */
    public void addAccountListener(String accountId, AccountListener listener);

    /**
     * Remove listener to account changes.
     * @param listener interface to listen to user changes
     */
    public void removeAccountListener(AccountListener listener);

    /**
     * Listen to all transaction changes for specific transaction.
     * @param transactionId @link transaction identifier
     * @param listener       interface to listen to transaction changes
     */
    public void addTransactionListener(String transactionId, TransactionListener listener);

    /**
     * Remove listener to transaction changes.
     * @param listener interface to listen to transaction changes
     */
    public void removeTransactionListener(TransactionListener listener);

    static final class CppProxy implements User
    {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
        }

        private native void nativeDestroy(long nativeRef);
        public void _djinni_private_destroy()
        {
            boolean destroyed = this.destroyed.getAndSet(true);
            if (!destroyed) nativeDestroy(this.nativeRef);
        }
        protected void finalize() throws java.lang.Throwable
        {
            _djinni_private_destroy();
            super.finalize();
        }

        @Override
        public String getId()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getId(this.nativeRef);
        }
        private native String native_getId(long _nativeRef);

        @Override
        public boolean hasWallet()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_hasWallet(this.nativeRef);
        }
        private native boolean native_hasWallet(long _nativeRef);

        @Override
        public boolean isActiveUser()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_isActiveUser(this.nativeRef);
        }
        private native boolean native_isActiveUser(long _nativeRef);

        @Override
        public boolean isModulrCustomer(String network)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_isModulrCustomer(this.nativeRef, network);
        }
        private native boolean native_isModulrCustomer(long _nativeRef, String network);

        @Override
        public void makeModulrCustomer(String network, String firstName, String middleName, String lastName, String dateOfBirth, String email, String phone, String addressLine1, String addressLine2, String country, String postCode, String postTown, SuccessCallback callback)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_makeModulrCustomer(this.nativeRef, network, firstName, middleName, lastName, dateOfBirth, email, phone, addressLine1, addressLine2, country, postCode, postTown, callback);
        }
        private native void native_makeModulrCustomer(long _nativeRef, String network, String firstName, String middleName, String lastName, String dateOfBirth, String email, String phone, String addressLine1, String addressLine2, String country, String postCode, String postTown, SuccessCallback callback);

        @Override
        public void createFiatAccount(String network, String currencyCode, AccountCallback callback)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_createFiatAccount(this.nativeRef, network, currencyCode, callback);
        }
        private native void native_createFiatAccount(long _nativeRef, String network, String currencyCode, AccountCallback callback);

        @Override
        public void getNominatedAccountFiatProperties(String accountId, AccountFiatPropertiesCallback callback)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_getNominatedAccountFiatProperties(this.nativeRef, accountId, callback);
        }
        private native void native_getNominatedAccountFiatProperties(long _nativeRef, String accountId, AccountFiatPropertiesCallback callback);

        @Override
        public void createWallet(String mnemonic, String password, WalletCallback callback)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_createWallet(this.nativeRef, mnemonic, password, callback);
        }
        private native void native_createWallet(long _nativeRef, String mnemonic, String password, WalletCallback callback);

        @Override
        public void unlockWallet(String password, WalletCallback callback)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_unlockWallet(this.nativeRef, password, callback);
        }
        private native void native_unlockWallet(long _nativeRef, String password, WalletCallback callback);

        @Override
        public void revealMnemonic(String password, MnemonicCallback callback)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_revealMnemonic(this.nativeRef, password, callback);
        }
        private native void native_revealMnemonic(long _nativeRef, String password, MnemonicCallback callback);

        @Override
        public boolean isRecoveryMnemonic(String mnemonic)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_isRecoveryMnemonic(this.nativeRef, mnemonic);
        }
        private native boolean native_isRecoveryMnemonic(long _nativeRef, String mnemonic);

        @Override
        public void recoverWallet(String mnemonic, String password, WalletCallback callback)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_recoverWallet(this.nativeRef, mnemonic, password, callback);
        }
        private native void native_recoverWallet(long _nativeRef, String mnemonic, String password, WalletCallback callback);

        @Override
        public Account getAccount(String currencyCode, String network, String type)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getAccount(this.nativeRef, currencyCode, network, type);
        }
        private native Account native_getAccount(long _nativeRef, String currencyCode, String network, String type);

        @Override
        public ArrayList<Account> getAccounts()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getAccounts(this.nativeRef);
        }
        private native ArrayList<Account> native_getAccounts(long _nativeRef);

        @Override
        public ArrayList<Transaction> getAccountTransactions(String accountId)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getAccountTransactions(this.nativeRef, accountId);
        }
        private native ArrayList<Transaction> native_getAccountTransactions(long _nativeRef, String accountId);

        @Override
        public ArrayList<Transaction> getTransactions()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getTransactions(this.nativeRef);
        }
        private native ArrayList<Transaction> native_getTransactions(long _nativeRef);

        @Override
        public Transaction getTransaction(String transactionId)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getTransaction(this.nativeRef, transactionId);
        }
        private native Transaction native_getTransaction(long _nativeRef, String transactionId);

        @Override
        public ArrayList<Exchange> getExchanges()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getExchanges(this.nativeRef);
        }
        private native ArrayList<Exchange> native_getExchanges(long _nativeRef);

        @Override
        public Exchange getExchangeByTransactionId(String transactionId)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getExchangeByTransactionId(this.nativeRef, transactionId);
        }
        private native Exchange native_getExchangeByTransactionId(long _nativeRef, String transactionId);

        @Override
        public void addListener(UserListener listener)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_addListener(this.nativeRef, listener);
        }
        private native void native_addListener(long _nativeRef, UserListener listener);

        @Override
        public void removeListener(UserListener listener)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_removeListener(this.nativeRef, listener);
        }
        private native void native_removeListener(long _nativeRef, UserListener listener);

        @Override
        public void addAccountListener(String accountId, AccountListener listener)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_addAccountListener(this.nativeRef, accountId, listener);
        }
        private native void native_addAccountListener(long _nativeRef, String accountId, AccountListener listener);

        @Override
        public void removeAccountListener(AccountListener listener)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_removeAccountListener(this.nativeRef, listener);
        }
        private native void native_removeAccountListener(long _nativeRef, AccountListener listener);

        @Override
        public void addTransactionListener(String transactionId, TransactionListener listener)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_addTransactionListener(this.nativeRef, transactionId, listener);
        }
        private native void native_addTransactionListener(long _nativeRef, String transactionId, TransactionListener listener);

        @Override
        public void removeTransactionListener(TransactionListener listener)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_removeTransactionListener(this.nativeRef, listener);
        }
        private native void native_removeTransactionListener(long _nativeRef, TransactionListener listener);
    }
}
