// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from user.djinni

package money.zumo.zumokit;

import java.util.ArrayList;
import java.util.concurrent.atomic.AtomicBoolean;

public interface User {
    public String getId();

    public boolean hasWallet();

    public boolean isActiveUser();

    public void createWallet(String mnemonic, String password, WalletCallback callback);

    public void unlockWallet(String password, WalletCallback callback);

    public void revealMnemonic(String password, MnemonicCallback callback);

    public boolean isRecoveryMnemonic(String mnemonic);

    public void recoverWallet(String mnemonic, String password, WalletCallback callback);

    public Account getAccount(String symbol, NetworkType network, AccountType type);

    public ArrayList<Account> getAccounts();

    public ArrayList<Transaction> getAccountTransactions(String accountId);

    public ArrayList<Transaction> getTransactions();

    public void addListener(UserListener listener);

    public void removeListener(UserListener listener);

    public void addAccountListener(String accountId, AccountListener listener);

    public void removeAccountListener(AccountListener listener);

    public void addTransactionListener(String transactionId, TransactionListener listener);

    public void removeTransactionListener(TransactionListener listener);

    static final class CppProxy implements User
    {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
        }

        private native void nativeDestroy(long nativeRef);
        public void _djinni_private_destroy()
        {
            boolean destroyed = this.destroyed.getAndSet(true);
            if (!destroyed) nativeDestroy(this.nativeRef);
        }
        protected void finalize() throws java.lang.Throwable
        {
            _djinni_private_destroy();
            super.finalize();
        }

        @Override
        public String getId()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getId(this.nativeRef);
        }
        private native String native_getId(long _nativeRef);

        @Override
        public boolean hasWallet()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_hasWallet(this.nativeRef);
        }
        private native boolean native_hasWallet(long _nativeRef);

        @Override
        public boolean isActiveUser()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_isActiveUser(this.nativeRef);
        }
        private native boolean native_isActiveUser(long _nativeRef);

        @Override
        public void createWallet(String mnemonic, String password, WalletCallback callback)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_createWallet(this.nativeRef, mnemonic, password, callback);
        }
        private native void native_createWallet(long _nativeRef, String mnemonic, String password, WalletCallback callback);

        @Override
        public void unlockWallet(String password, WalletCallback callback)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_unlockWallet(this.nativeRef, password, callback);
        }
        private native void native_unlockWallet(long _nativeRef, String password, WalletCallback callback);

        @Override
        public void revealMnemonic(String password, MnemonicCallback callback)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_revealMnemonic(this.nativeRef, password, callback);
        }
        private native void native_revealMnemonic(long _nativeRef, String password, MnemonicCallback callback);

        @Override
        public boolean isRecoveryMnemonic(String mnemonic)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_isRecoveryMnemonic(this.nativeRef, mnemonic);
        }
        private native boolean native_isRecoveryMnemonic(long _nativeRef, String mnemonic);

        @Override
        public void recoverWallet(String mnemonic, String password, WalletCallback callback)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_recoverWallet(this.nativeRef, mnemonic, password, callback);
        }
        private native void native_recoverWallet(long _nativeRef, String mnemonic, String password, WalletCallback callback);

        @Override
        public Account getAccount(String symbol, NetworkType network, AccountType type)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getAccount(this.nativeRef, symbol, network, type);
        }
        private native Account native_getAccount(long _nativeRef, String symbol, NetworkType network, AccountType type);

        @Override
        public ArrayList<Account> getAccounts()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getAccounts(this.nativeRef);
        }
        private native ArrayList<Account> native_getAccounts(long _nativeRef);

        @Override
        public ArrayList<Transaction> getAccountTransactions(String accountId)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getAccountTransactions(this.nativeRef, accountId);
        }
        private native ArrayList<Transaction> native_getAccountTransactions(long _nativeRef, String accountId);

        @Override
        public ArrayList<Transaction> getTransactions()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getTransactions(this.nativeRef);
        }
        private native ArrayList<Transaction> native_getTransactions(long _nativeRef);

        @Override
        public void addListener(UserListener listener)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_addListener(this.nativeRef, listener);
        }
        private native void native_addListener(long _nativeRef, UserListener listener);

        @Override
        public void removeListener(UserListener listener)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_removeListener(this.nativeRef, listener);
        }
        private native void native_removeListener(long _nativeRef, UserListener listener);

        @Override
        public void addAccountListener(String accountId, AccountListener listener)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_addAccountListener(this.nativeRef, accountId, listener);
        }
        private native void native_addAccountListener(long _nativeRef, String accountId, AccountListener listener);

        @Override
        public void removeAccountListener(AccountListener listener)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_removeAccountListener(this.nativeRef, listener);
        }
        private native void native_removeAccountListener(long _nativeRef, AccountListener listener);

        @Override
        public void addTransactionListener(String transactionId, TransactionListener listener)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_addTransactionListener(this.nativeRef, transactionId, listener);
        }
        private native void native_addTransactionListener(long _nativeRef, String transactionId, TransactionListener listener);

        @Override
        public void removeTransactionListener(TransactionListener listener)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_removeTransactionListener(this.nativeRef, listener);
        }
        private native void native_removeTransactionListener(long _nativeRef, TransactionListener listener);
    }
}
