// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from records.djinni

package money.zumo.zumokit;

import java.util.HashMap;

/** Record containing Zumo exchange settings used in making exchanges. */
public final class ExchangeSettings {


    /*package*/ final String mId;

    /*package*/ final HashMap<String, String> mDepositAddress;

    /*package*/ final String mDepositCurrency;

    /*package*/ final String mWithdrawCurrency;

    /*package*/ final java.math.BigDecimal mMinExchangeAmount;

    /*package*/ final java.math.BigDecimal mFeeRate;

    /*package*/ final java.math.BigDecimal mDepositFeeRate;

    /*package*/ final java.math.BigDecimal mWithdrawFee;

    /*package*/ final long mTimestamp;

    public ExchangeSettings(
            String id,
            HashMap<String, String> depositAddress,
            String depositCurrency,
            String withdrawCurrency,
            java.math.BigDecimal minExchangeAmount,
            java.math.BigDecimal feeRate,
            java.math.BigDecimal depositFeeRate,
            java.math.BigDecimal withdrawFee,
            long timestamp) {
        this.mId = id;
        this.mDepositAddress = depositAddress;
        this.mDepositCurrency = depositCurrency;
        this.mWithdrawCurrency = withdrawCurrency;
        this.mMinExchangeAmount = minExchangeAmount;
        this.mFeeRate = feeRate;
        this.mDepositFeeRate = depositFeeRate;
        this.mWithdrawFee = withdrawFee;
        this.mTimestamp = timestamp;
    }

    /** Identifier. */
    public String getId() {
        return mId;
    }

    /**
     * Zumo Exchange Service wallet address for each network type.
     * @see NetworkType
     */
    public HashMap<String, String> getDepositAddress() {
        return mDepositAddress;
    }

    /**
     * Currency code of outgoing transaction.
     * @see CurrencyCode
     */
    public String getDepositCurrency() {
        return mDepositCurrency;
    }

    /**
     * Currency code of return transaction.
     * @see CurrencyCode
     */
    public String getWithdrawCurrency() {
        return mWithdrawCurrency;
    }

    /** Minimum amount that can be exchanged in outgoing transaction currency. */
    public java.math.BigDecimal getMinExchangeAmount() {
        return mMinExchangeAmount;
    }

    /** Exchange fee rate that will be charged once currency is exchanged. */
    public java.math.BigDecimal getFeeRate() {
        return mFeeRate;
    }

    /** Fee rate that will be used for outgoing transaction. */
    public java.math.BigDecimal getDepositFeeRate() {
        return mDepositFeeRate;
    }

    /** Fee that will charged for return transaction. */
    public java.math.BigDecimal getWithdrawFee() {
        return mWithdrawFee;
    }

    /** Epoch timestamp when the exchange settings were last updated. */
    public long getTimestamp() {
        return mTimestamp;
    }

    @Override
    public boolean equals(Object obj) {
        if (!(obj instanceof ExchangeSettings)) {
            return false;
        }
        ExchangeSettings other = (ExchangeSettings) obj;
        return this.mId.equals(other.mId) &&
                this.mDepositAddress.equals(other.mDepositAddress) &&
                this.mDepositCurrency.equals(other.mDepositCurrency) &&
                this.mWithdrawCurrency.equals(other.mWithdrawCurrency) &&
                this.mMinExchangeAmount.equals(other.mMinExchangeAmount) &&
                this.mFeeRate.equals(other.mFeeRate) &&
                this.mDepositFeeRate.equals(other.mDepositFeeRate) &&
                this.mWithdrawFee.equals(other.mWithdrawFee) &&
                this.mTimestamp == other.mTimestamp;
    }

    @Override
    public int hashCode() {
        // Pick an arbitrary non-zero starting value
        int hashCode = 17;
        hashCode = hashCode * 31 + mId.hashCode();
        hashCode = hashCode * 31 + mDepositAddress.hashCode();
        hashCode = hashCode * 31 + mDepositCurrency.hashCode();
        hashCode = hashCode * 31 + mWithdrawCurrency.hashCode();
        hashCode = hashCode * 31 + (mMinExchangeAmount.hashCode());
        hashCode = hashCode * 31 + (mFeeRate.hashCode());
        hashCode = hashCode * 31 + (mDepositFeeRate.hashCode());
        hashCode = hashCode * 31 + (mWithdrawFee.hashCode());
        hashCode = hashCode * 31 + ((int) (mTimestamp ^ (mTimestamp >>> 32)));
        return hashCode;
    }

    @Override
    public String toString() {
        return "ExchangeSettings{" +
                "mId=" + mId +
                "," + "mDepositAddress=" + mDepositAddress +
                "," + "mDepositCurrency=" + mDepositCurrency +
                "," + "mWithdrawCurrency=" + mWithdrawCurrency +
                "," + "mMinExchangeAmount=" + mMinExchangeAmount +
                "," + "mFeeRate=" + mFeeRate +
                "," + "mDepositFeeRate=" + mDepositFeeRate +
                "," + "mWithdrawFee=" + mWithdrawFee +
                "," + "mTimestamp=" + mTimestamp +
        "}";
    }

}
