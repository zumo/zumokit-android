// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from records.djinni

package money.zumo.zumokit;

import java.util.HashMap;

/** Record containing Zumo exchange setting used in making exchanges. */
public final class ExchangeSetting {


    /*package*/ final String mId;

    /*package*/ final HashMap<String, String> mExchangeAddress;

    /*package*/ final String mFromCurrency;

    /*package*/ final String mToCurrency;

    /*package*/ final java.math.BigDecimal mMinExchangeAmount;

    /*package*/ final java.math.BigDecimal mExchangeFeeRate;

    /*package*/ final java.math.BigDecimal mOutgoingTransactionFeeRate;

    /*package*/ final java.math.BigDecimal mReturnTransactionFee;

    /*package*/ final long mTimestamp;

    public ExchangeSetting(
            String id,
            HashMap<String, String> exchangeAddress,
            String fromCurrency,
            String toCurrency,
            java.math.BigDecimal minExchangeAmount,
            java.math.BigDecimal exchangeFeeRate,
            java.math.BigDecimal outgoingTransactionFeeRate,
            java.math.BigDecimal returnTransactionFee,
            long timestamp) {
        this.mId = id;
        this.mExchangeAddress = exchangeAddress;
        this.mFromCurrency = fromCurrency;
        this.mToCurrency = toCurrency;
        this.mMinExchangeAmount = minExchangeAmount;
        this.mExchangeFeeRate = exchangeFeeRate;
        this.mOutgoingTransactionFeeRate = outgoingTransactionFeeRate;
        this.mReturnTransactionFee = returnTransactionFee;
        this.mTimestamp = timestamp;
    }

    /** Identifier. */
    public String getId() {
        return mId;
    }

    /**
     * Mapping between networks and Zumo Exchange addresses.
     * @see NetworkType
     */
    public HashMap<String, String> getExchangeAddress() {
        return mExchangeAddress;
    }

    /**
     * Currency code of outgoing transaction.
     * @see CurrencyCode
     */
    public String getFromCurrency() {
        return mFromCurrency;
    }

    /**
     * Currency code of return transaction.
     * @see CurrencyCode
     */
    public String getToCurrency() {
        return mToCurrency;
    }

    /** Minimum amount that can be exchanged in outgoing transaction currency. */
    public java.math.BigDecimal getMinExchangeAmount() {
        return mMinExchangeAmount;
    }

    /** Exchange fee rate that will be charged once currency is exchanged. */
    public java.math.BigDecimal getExchangeFeeRate() {
        return mExchangeFeeRate;
    }

    /** Fee rate that will be used for outgoing transaction. */
    public java.math.BigDecimal getOutgoingTransactionFeeRate() {
        return mOutgoingTransactionFeeRate;
    }

    /** Fee that will charged for return transaction. */
    public java.math.BigDecimal getReturnTransactionFee() {
        return mReturnTransactionFee;
    }

    /** Epoch timestamp when the exchange setting were last updated. */
    public long getTimestamp() {
        return mTimestamp;
    }

    @Override
    public boolean equals(Object obj) {
        if (!(obj instanceof ExchangeSetting)) {
            return false;
        }
        ExchangeSetting other = (ExchangeSetting) obj;
        return this.mId.equals(other.mId) &&
                this.mExchangeAddress.equals(other.mExchangeAddress) &&
                this.mFromCurrency.equals(other.mFromCurrency) &&
                this.mToCurrency.equals(other.mToCurrency) &&
                this.mMinExchangeAmount.equals(other.mMinExchangeAmount) &&
                this.mExchangeFeeRate.equals(other.mExchangeFeeRate) &&
                this.mOutgoingTransactionFeeRate.equals(other.mOutgoingTransactionFeeRate) &&
                this.mReturnTransactionFee.equals(other.mReturnTransactionFee) &&
                this.mTimestamp == other.mTimestamp;
    }

    @Override
    public int hashCode() {
        // Pick an arbitrary non-zero starting value
        int hashCode = 17;
        hashCode = hashCode * 31 + mId.hashCode();
        hashCode = hashCode * 31 + mExchangeAddress.hashCode();
        hashCode = hashCode * 31 + mFromCurrency.hashCode();
        hashCode = hashCode * 31 + mToCurrency.hashCode();
        hashCode = hashCode * 31 + (mMinExchangeAmount.hashCode());
        hashCode = hashCode * 31 + (mExchangeFeeRate.hashCode());
        hashCode = hashCode * 31 + (mOutgoingTransactionFeeRate.hashCode());
        hashCode = hashCode * 31 + (mReturnTransactionFee.hashCode());
        hashCode = hashCode * 31 + ((int) (mTimestamp ^ (mTimestamp >>> 32)));
        return hashCode;
    }

    @Override
    public String toString() {
        return "ExchangeSetting{" +
                "mId=" + mId +
                "," + "mExchangeAddress=" + mExchangeAddress +
                "," + "mFromCurrency=" + mFromCurrency +
                "," + "mToCurrency=" + mToCurrency +
                "," + "mMinExchangeAmount=" + mMinExchangeAmount +
                "," + "mExchangeFeeRate=" + mExchangeFeeRate +
                "," + "mOutgoingTransactionFeeRate=" + mOutgoingTransactionFeeRate +
                "," + "mReturnTransactionFee=" + mReturnTransactionFee +
                "," + "mTimestamp=" + mTimestamp +
        "}";
    }

}
