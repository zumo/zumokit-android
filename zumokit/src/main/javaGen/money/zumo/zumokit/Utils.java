// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from utils.djinni

package money.zumo.zumokit;

import java.util.concurrent.atomic.AtomicBoolean;

public interface Utils {
    public String generateMnemonic(int wordCount);

    public boolean isValidEthAddress(String address);

    public boolean isValidBtcAddress(String address, NetworkType network);

    public String weiToEth(String number);

    public String ethToWei(String number);

    public String gweiToEth(String number);

    public String ethToGwei(String number);

    public String weiToGwei(String number);

    public String gweiToWei(String number);

    static final class CppProxy implements Utils
    {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
        }

        private native void nativeDestroy(long nativeRef);
        public void _djinni_private_destroy()
        {
            boolean destroyed = this.destroyed.getAndSet(true);
            if (!destroyed) nativeDestroy(this.nativeRef);
        }
        protected void finalize() throws java.lang.Throwable
        {
            _djinni_private_destroy();
            super.finalize();
        }

        @Override
        public String generateMnemonic(int wordCount)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_generateMnemonic(this.nativeRef, wordCount);
        }
        private native String native_generateMnemonic(long _nativeRef, int wordCount);

        @Override
        public boolean isValidEthAddress(String address)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_isValidEthAddress(this.nativeRef, address);
        }
        private native boolean native_isValidEthAddress(long _nativeRef, String address);

        @Override
        public boolean isValidBtcAddress(String address, NetworkType network)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_isValidBtcAddress(this.nativeRef, address, network);
        }
        private native boolean native_isValidBtcAddress(long _nativeRef, String address, NetworkType network);

        @Override
        public String weiToEth(String number)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_weiToEth(this.nativeRef, number);
        }
        private native String native_weiToEth(long _nativeRef, String number);

        @Override
        public String ethToWei(String number)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_ethToWei(this.nativeRef, number);
        }
        private native String native_ethToWei(long _nativeRef, String number);

        @Override
        public String gweiToEth(String number)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_gweiToEth(this.nativeRef, number);
        }
        private native String native_gweiToEth(long _nativeRef, String number);

        @Override
        public String ethToGwei(String number)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_ethToGwei(this.nativeRef, number);
        }
        private native String native_ethToGwei(long _nativeRef, String number);

        @Override
        public String weiToGwei(String number)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_weiToGwei(this.nativeRef, number);
        }
        private native String native_weiToGwei(long _nativeRef, String number);

        @Override
        public String gweiToWei(String number)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_gweiToWei(this.nativeRef, number);
        }
        private native String native_gweiToWei(long _nativeRef, String number);
    }
}
