// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from utils.djinni

package money.zumo.zumokit;

import java.util.concurrent.atomic.AtomicBoolean;

/**
 * Utility class providing blockchain related utility methods. Accessed from {@link  ZumoKit ZumoKit} class.
 * <p>
 * This class provides mnemonic phrase generation utility and
 *  Bitcoin & Ethereum address validation utilities.
 */
public interface Utils {
    /**
     * Generates mnemonic seed phrase used in wallet creation process.
     * @param wordCount   12, 15, 18, 21 or 24
     */
    public String generateMnemonic(int wordCount);

    /**
     * Validates Ethereum, Bitcoin or Bitcoin SV address.
     * @param currencyCode 'ETH', 'BTC' or 'BSV'
     * @param address       blockchain address
     * @param network       network type
     * @return true if address is valid on the given network
     * @see NetworkType
     */
    public boolean isValidAddress(String currencyCode, String address, String network);

    static final class CppProxy implements Utils
    {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
        }

        private native void nativeDestroy(long nativeRef);
        public void _djinni_private_destroy()
        {
            boolean destroyed = this.destroyed.getAndSet(true);
            if (!destroyed) nativeDestroy(this.nativeRef);
        }
        protected void finalize() throws java.lang.Throwable
        {
            _djinni_private_destroy();
            super.finalize();
        }

        @Override
        public String generateMnemonic(int wordCount)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_generateMnemonic(this.nativeRef, wordCount);
        }
        private native String native_generateMnemonic(long _nativeRef, int wordCount);

        @Override
        public boolean isValidAddress(String currencyCode, String address, String network)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_isValidAddress(this.nativeRef, currencyCode, address, network);
        }
        private native boolean native_isValidAddress(long _nativeRef, String currencyCode, String address, String network);
    }
}
