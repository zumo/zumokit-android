// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from records.djinni

package money.zumo.zumokit;

/**
 * Record containing properties associated with a card transaction.
 * @see Transaction
 */
public final class TransactionCardProperties {


    /*package*/ final String mCardId;

    /*package*/ final java.math.BigDecimal mTransactionAmount;

    /*package*/ final String mTransactionCurrency;

    /*package*/ final java.math.BigDecimal mBillingAmount;

    /*package*/ final String mBillingCurrency;

    /*package*/ final java.math.BigDecimal mExchangeRateValue;

    /*package*/ final String mMcc;

    /*package*/ final String mMerchantName;

    /*package*/ final String mMerchantCountry;

    public TransactionCardProperties(
            String cardId,
            java.math.BigDecimal transactionAmount,
            String transactionCurrency,
            java.math.BigDecimal billingAmount,
            String billingCurrency,
            java.math.BigDecimal exchangeRateValue,
            String mcc,
            String merchantName,
            String merchantCountry) {
        this.mCardId = cardId;
        this.mTransactionAmount = transactionAmount;
        this.mTransactionCurrency = transactionCurrency;
        this.mBillingAmount = billingAmount;
        this.mBillingCurrency = billingCurrency;
        this.mExchangeRateValue = exchangeRateValue;
        this.mMcc = mcc;
        this.mMerchantName = merchantName;
        this.mMerchantCountry = merchantCountry;
    }

    /**
     * Card identifier.
     * @see Card
     */
    public String getCardId() {
        return mCardId;
    }

    /** Transaction amount. */
    public java.math.BigDecimal getTransactionAmount() {
        return mTransactionAmount;
    }

    /**
     * Transaction currency code.
     * @see CurrencyCode 
     */
    public String getTransactionCurrency() {
        return mTransactionCurrency;
    }

    /** Billing amount. */
    public java.math.BigDecimal getBillingAmount() {
        return mBillingAmount;
    }

    /**
     * Billing currency code.
     * @see CurrencyCode 
     */
    public String getBillingCurrency() {
        return mBillingCurrency;
    }

    /** Exchange rate applied to any conversion between transaction & billing amount rounded to 6 decimal places. */
    public java.math.BigDecimal getExchangeRateValue() {
        return mExchangeRateValue;
    }

    /** The Merchant Category Code (MCC) for the card activity in ISO-18245 format. */
    public String getMcc() {
        return mMcc;
    }

    /** The merchant name. */
    public String getMerchantName() {
        return mMerchantName;
    }

    /** The 3 letter ISO 3166 merchant country code. */
    public String getMerchantCountry() {
        return mMerchantCountry;
    }

    @Override
    public boolean equals(Object obj) {
        if (!(obj instanceof TransactionCardProperties)) {
            return false;
        }
        TransactionCardProperties other = (TransactionCardProperties) obj;
        return this.mCardId.equals(other.mCardId) &&
                this.mTransactionAmount.equals(other.mTransactionAmount) &&
                this.mTransactionCurrency.equals(other.mTransactionCurrency) &&
                this.mBillingAmount.equals(other.mBillingAmount) &&
                this.mBillingCurrency.equals(other.mBillingCurrency) &&
                this.mExchangeRateValue.equals(other.mExchangeRateValue) &&
                this.mMcc.equals(other.mMcc) &&
                this.mMerchantName.equals(other.mMerchantName) &&
                this.mMerchantCountry.equals(other.mMerchantCountry);
    }

    @Override
    public int hashCode() {
        // Pick an arbitrary non-zero starting value
        int hashCode = 17;
        hashCode = hashCode * 31 + mCardId.hashCode();
        hashCode = hashCode * 31 + (mTransactionAmount.hashCode());
        hashCode = hashCode * 31 + mTransactionCurrency.hashCode();
        hashCode = hashCode * 31 + (mBillingAmount.hashCode());
        hashCode = hashCode * 31 + mBillingCurrency.hashCode();
        hashCode = hashCode * 31 + (mExchangeRateValue.hashCode());
        hashCode = hashCode * 31 + mMcc.hashCode();
        hashCode = hashCode * 31 + mMerchantName.hashCode();
        hashCode = hashCode * 31 + mMerchantCountry.hashCode();
        return hashCode;
    }

    @Override
    public String toString() {
        return "TransactionCardProperties{" +
                "mCardId=" + mCardId +
                "," + "mTransactionAmount=" + mTransactionAmount +
                "," + "mTransactionCurrency=" + mTransactionCurrency +
                "," + "mBillingAmount=" + mBillingAmount +
                "," + "mBillingCurrency=" + mBillingCurrency +
                "," + "mExchangeRateValue=" + mExchangeRateValue +
                "," + "mMcc=" + mMcc +
                "," + "mMerchantName=" + mMerchantName +
                "," + "mMerchantCountry=" + mMerchantCountry +
        "}";
    }

}
