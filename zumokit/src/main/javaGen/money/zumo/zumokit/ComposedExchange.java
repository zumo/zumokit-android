// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from records.djinni

package money.zumo.zumokit;

/** Record containing result of the compose exchange method on {@link  Wallet Wallet} object. */
public final class ComposedExchange {


    /*package*/ final String mSignedTransaction;

    /*package*/ final Account mDepositAccount;

    /*package*/ final Account mWithdrawAccount;

    /*package*/ final ExchangeRate mExchangeRate;

    /*package*/ final ExchangeSettings mExchangeSettings;

    /*package*/ final String mExchangeAddress;

    /*package*/ final java.math.BigDecimal mValue;

    /*package*/ final java.math.BigDecimal mReturnValue;

    /*package*/ final java.math.BigDecimal mDepositFee;

    /*package*/ final java.math.BigDecimal mExchangeFee;

    /*package*/ final java.math.BigDecimal mWithdrawFee;

    /*package*/ final String mNonce;

    public ComposedExchange(
            String signedTransaction,
            Account depositAccount,
            Account withdrawAccount,
            ExchangeRate exchangeRate,
            ExchangeSettings exchangeSettings,
            String exchangeAddress,
            java.math.BigDecimal value,
            java.math.BigDecimal returnValue,
            java.math.BigDecimal depositFee,
            java.math.BigDecimal exchangeFee,
            java.math.BigDecimal withdrawFee,
            String nonce) {
        this.mSignedTransaction = signedTransaction;
        this.mDepositAccount = depositAccount;
        this.mWithdrawAccount = withdrawAccount;
        this.mExchangeRate = exchangeRate;
        this.mExchangeSettings = exchangeSettings;
        this.mExchangeAddress = exchangeAddress;
        this.mValue = value;
        this.mReturnValue = returnValue;
        this.mDepositFee = depositFee;
        this.mExchangeFee = exchangeFee;
        this.mWithdrawFee = withdrawFee;
        this.mNonce = nonce;
    }

    /** Signed transaction for a crypto transaction, null otherwise. */
    public String getSignedTransaction() {
        return mSignedTransaction;
    }

    /** Source account. */
    public Account getDepositAccount() {
        return mDepositAccount;
    }

    /** Target account. */
    public Account getWithdrawAccount() {
        return mWithdrawAccount;
    }

    /** Exchange rate used composing exchange. */
    public ExchangeRate getExchangeRate() {
        return mExchangeRate;
    }

    /** Exchange settings used composing exchange. */
    public ExchangeSettings getExchangeSettings() {
        return mExchangeSettings;
    }

    /**
     * Zumo Exchange Service wallet address where outgoing crypto funds were deposited,
     * null for exchanges from fiat currencies.
     */
    public String getExchangeAddress() {
        return mExchangeAddress;
    }

    /** Exchange value in source account currency. */
    public java.math.BigDecimal getValue() {
        return mValue;
    }

    /**
     * Amount that user receives, calculated as <code>value X exchangeRate X (1 - feeRate) - withdrawFee</code>.
     * @see ExchangeSettings
     */
    public java.math.BigDecimal getReturnValue() {
        return mReturnValue;
    }

    /** Outgoing transaction fee. */
    public java.math.BigDecimal getDepositFee() {
        return mDepositFee;
    }

    /**
     * Exchange fee, calculated as <code>value X exchangeRate X feeRate</code>.
     * @see ExchangeSettings
     */
    public java.math.BigDecimal getExchangeFee() {
        return mExchangeFee;
    }

    /**
     * Return transaction fee.
     * @see ExchangeSettings
     */
    public java.math.BigDecimal getWithdrawFee() {
        return mWithdrawFee;
    }

    /** Unique nonce used to prevent double spend. */
    public String getNonce() {
        return mNonce;
    }

    @Override
    public boolean equals(Object obj) {
        if (!(obj instanceof ComposedExchange)) {
            return false;
        }
        ComposedExchange other = (ComposedExchange) obj;
        return ((this.mSignedTransaction == null && other.mSignedTransaction == null) || (this.mSignedTransaction != null && this.mSignedTransaction.equals(other.mSignedTransaction))) &&
                this.mDepositAccount.equals(other.mDepositAccount) &&
                this.mWithdrawAccount.equals(other.mWithdrawAccount) &&
                this.mExchangeRate.equals(other.mExchangeRate) &&
                this.mExchangeSettings.equals(other.mExchangeSettings) &&
                ((this.mExchangeAddress == null && other.mExchangeAddress == null) || (this.mExchangeAddress != null && this.mExchangeAddress.equals(other.mExchangeAddress))) &&
                this.mValue.equals(other.mValue) &&
                this.mReturnValue.equals(other.mReturnValue) &&
                this.mDepositFee.equals(other.mDepositFee) &&
                this.mExchangeFee.equals(other.mExchangeFee) &&
                this.mWithdrawFee.equals(other.mWithdrawFee) &&
                this.mNonce.equals(other.mNonce);
    }

    @Override
    public int hashCode() {
        // Pick an arbitrary non-zero starting value
        int hashCode = 17;
        hashCode = hashCode * 31 + (mSignedTransaction == null ? 0 : mSignedTransaction.hashCode());
        hashCode = hashCode * 31 + mDepositAccount.hashCode();
        hashCode = hashCode * 31 + mWithdrawAccount.hashCode();
        hashCode = hashCode * 31 + mExchangeRate.hashCode();
        hashCode = hashCode * 31 + mExchangeSettings.hashCode();
        hashCode = hashCode * 31 + (mExchangeAddress == null ? 0 : mExchangeAddress.hashCode());
        hashCode = hashCode * 31 + (mValue.hashCode());
        hashCode = hashCode * 31 + (mReturnValue.hashCode());
        hashCode = hashCode * 31 + (mDepositFee.hashCode());
        hashCode = hashCode * 31 + (mExchangeFee.hashCode());
        hashCode = hashCode * 31 + (mWithdrawFee.hashCode());
        hashCode = hashCode * 31 + mNonce.hashCode();
        return hashCode;
    }

    @Override
    public String toString() {
        return "ComposedExchange{" +
                "mSignedTransaction=" + mSignedTransaction +
                "," + "mDepositAccount=" + mDepositAccount +
                "," + "mWithdrawAccount=" + mWithdrawAccount +
                "," + "mExchangeRate=" + mExchangeRate +
                "," + "mExchangeSettings=" + mExchangeSettings +
                "," + "mExchangeAddress=" + mExchangeAddress +
                "," + "mValue=" + mValue +
                "," + "mReturnValue=" + mReturnValue +
                "," + "mDepositFee=" + mDepositFee +
                "," + "mExchangeFee=" + mExchangeFee +
                "," + "mWithdrawFee=" + mWithdrawFee +
                "," + "mNonce=" + mNonce +
        "}";
    }

}
