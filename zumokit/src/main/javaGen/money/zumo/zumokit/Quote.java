// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from records.djinni

package money.zumo.zumokit;

/** Record containing Zumo exchange rate quote used in making exchanges. */
public final class Quote {


    /*package*/ final String mId;

    /*package*/ final int mExpireTime;

    /*package*/ final Integer mExpiresIn;

    /*package*/ final String mFromCurrency;

    /*package*/ final String mToCurrency;

    /*package*/ final java.math.BigDecimal mDepositAmount;

    /*package*/ final java.math.BigDecimal mValue;

    public Quote(
            String id,
            int expireTime,
            Integer expiresIn,
            String fromCurrency,
            String toCurrency,
            java.math.BigDecimal depositAmount,
            java.math.BigDecimal value) {
        this.mId = id;
        this.mExpireTime = expireTime;
        this.mExpiresIn = expiresIn;
        this.mFromCurrency = fromCurrency;
        this.mToCurrency = toCurrency;
        this.mDepositAmount = depositAmount;
        this.mValue = value;
    }

    /** Identifier. */
    public String getId() {
        return mId;
    }

    /** Epoch timestamp representing expiration time of this quote. */
    public int getExpireTime() {
        return mExpireTime;
    }

    /** Seconds until expiration time for active quotes, null for historical quotes. */
    public Integer getExpiresIn() {
        return mExpiresIn;
    }

    /**
     * Deposit currency.
     * @see CurrencyCode
     */
    public String getFromCurrency() {
        return mFromCurrency;
    }

    /**
     * Target currency.
     * @see CurrencyCode
     */
    public String getToCurrency() {
        return mToCurrency;
    }

    /** Deposit amount to be exchanged to target currency. */
    public java.math.BigDecimal getDepositAmount() {
        return mDepositAmount;
    }

    /** Value of 1 unit of deposit currency in target currency. */
    public java.math.BigDecimal getValue() {
        return mValue;
    }

    @Override
    public boolean equals(Object obj) {
        if (!(obj instanceof Quote)) {
            return false;
        }
        Quote other = (Quote) obj;
        return this.mId.equals(other.mId) &&
                this.mExpireTime == other.mExpireTime &&
                ((this.mExpiresIn == null && other.mExpiresIn == null) || (this.mExpiresIn != null && this.mExpiresIn.equals(other.mExpiresIn))) &&
                this.mFromCurrency.equals(other.mFromCurrency) &&
                this.mToCurrency.equals(other.mToCurrency) &&
                this.mDepositAmount.equals(other.mDepositAmount) &&
                this.mValue.equals(other.mValue);
    }

    @Override
    public int hashCode() {
        // Pick an arbitrary non-zero starting value
        int hashCode = 17;
        hashCode = hashCode * 31 + mId.hashCode();
        hashCode = hashCode * 31 + mExpireTime;
        hashCode = hashCode * 31 + (mExpiresIn == null ? 0 : mExpiresIn.hashCode());
        hashCode = hashCode * 31 + mFromCurrency.hashCode();
        hashCode = hashCode * 31 + mToCurrency.hashCode();
        hashCode = hashCode * 31 + (mDepositAmount.hashCode());
        hashCode = hashCode * 31 + (mValue.hashCode());
        return hashCode;
    }

    @Override
    public String toString() {
        return "Quote{" +
                "mId=" + mId +
                "," + "mExpireTime=" + mExpireTime +
                "," + "mExpiresIn=" + mExpiresIn +
                "," + "mFromCurrency=" + mFromCurrency +
                "," + "mToCurrency=" + mToCurrency +
                "," + "mDepositAmount=" + mDepositAmount +
                "," + "mValue=" + mValue +
        "}";
    }

}
