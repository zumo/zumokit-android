// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from state.djinni

package money.zumo.zumokit;

/**
 * Zumo exchange rates used in making exchanges.
 * Can also be used to display amounts in local currency to the user.
 */
public final class ExchangeRate {


    /*package*/ final String mId;

    /*package*/ final String mDepositCurrency;

    /*package*/ final String mWithdrawCurrency;

    /*package*/ final java.math.BigDecimal mValue;

    /*package*/ final long mValidTo;

    /*package*/ final long mTimestamp;

    public ExchangeRate(
            String id,
            String depositCurrency,
            String withdrawCurrency,
            java.math.BigDecimal value,
            long validTo,
            long timestamp) {
        this.mId = id;
        this.mDepositCurrency = depositCurrency;
        this.mWithdrawCurrency = withdrawCurrency;
        this.mValue = value;
        this.mValidTo = validTo;
        this.mTimestamp = timestamp;
    }

    /** Identifier. */
    public String getId() {
        return mId;
    }

    /**
     * Currency from which exchange is being made.
     * @see CurrencyCode
     */
    public String getDepositCurrency() {
        return mDepositCurrency;
    }

    /**
     * Currency from which exchange is being made.
     * @see CurrencyCode
     */
    public String getWithdrawCurrency() {
        return mWithdrawCurrency;
    }

    /** Value of 1 unit of deposit currency in withdraw currency. */
    public java.math.BigDecimal getValue() {
        return mValue;
    }

    /** Epoch timestamp representing expiration time of this exchange rate. */
    public long getValidTo() {
        return mValidTo;
    }

    /** Epoch timestamp when the exchange rate was issued. */
    public long getTimestamp() {
        return mTimestamp;
    }

    @Override
    public boolean equals(Object obj) {
        if (!(obj instanceof ExchangeRate)) {
            return false;
        }
        ExchangeRate other = (ExchangeRate) obj;
        return this.mId.equals(other.mId) &&
                this.mDepositCurrency.equals(other.mDepositCurrency) &&
                this.mWithdrawCurrency.equals(other.mWithdrawCurrency) &&
                this.mValue.equals(other.mValue) &&
                this.mValidTo == other.mValidTo &&
                this.mTimestamp == other.mTimestamp;
    }

    @Override
    public int hashCode() {
        // Pick an arbitrary non-zero starting value
        int hashCode = 17;
        hashCode = hashCode * 31 + mId.hashCode();
        hashCode = hashCode * 31 + mDepositCurrency.hashCode();
        hashCode = hashCode * 31 + mWithdrawCurrency.hashCode();
        hashCode = hashCode * 31 + (mValue.hashCode());
        hashCode = hashCode * 31 + ((int) (mValidTo ^ (mValidTo >>> 32)));
        hashCode = hashCode * 31 + ((int) (mTimestamp ^ (mTimestamp >>> 32)));
        return hashCode;
    }

    @Override
    public String toString() {
        return "ExchangeRate{" +
                "mId=" + mId +
                "," + "mDepositCurrency=" + mDepositCurrency +
                "," + "mWithdrawCurrency=" + mWithdrawCurrency +
                "," + "mValue=" + mValue +
                "," + "mValidTo=" + mValidTo +
                "," + "mTimestamp=" + mTimestamp +
        "}";
    }

}
