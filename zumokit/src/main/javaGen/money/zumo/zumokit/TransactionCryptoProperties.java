// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from records.djinni

package money.zumo.zumokit;

import java.util.HashMap;

/**
 * Record containing transaction's crypto properties.
 * @see Transaction
 */
public final class TransactionCryptoProperties {


    /*package*/ final String mTxHash;

    /*package*/ final Integer mNonce;

    /*package*/ final String mFromAddress;

    /*package*/ final String mToAddress;

    /*package*/ final String mData;

    /*package*/ final java.math.BigDecimal mGasPrice;

    /*package*/ final Integer mGasLimit;

    /*package*/ final HashMap<String, java.math.BigDecimal> mFiatAmount;

    /*package*/ final HashMap<String, java.math.BigDecimal> mFiatFee;

    public TransactionCryptoProperties(
            String txHash,
            Integer nonce,
            String fromAddress,
            String toAddress,
            String data,
            java.math.BigDecimal gasPrice,
            Integer gasLimit,
            HashMap<String, java.math.BigDecimal> fiatAmount,
            HashMap<String, java.math.BigDecimal> fiatFee) {
        this.mTxHash = txHash;
        this.mNonce = nonce;
        this.mFromAddress = fromAddress;
        this.mToAddress = toAddress;
        this.mData = data;
        this.mGasPrice = gasPrice;
        this.mGasLimit = gasLimit;
        this.mFiatAmount = fiatAmount;
        this.mFiatFee = fiatFee;
    }

    /** Transaction hash or null. */
    public String getTxHash() {
        return mTxHash;
    }

    /**
     * Ethereum transaction nonce if greater than 0 and
     * it is Ethereum transaction, otherwise returns null.
     */
    public Integer getNonce() {
        return mNonce;
    }

    /** Wallet address of sender, */
    public String getFromAddress() {
        return mFromAddress;
    }

    /** Wallet address of receiver or null, if it is Ethereum contract deploy. */
    public String getToAddress() {
        return mToAddress;
    }

    /** Transaction data or null. */
    public String getData() {
        return mData;
    }

    /** Ethereum gas price if it is Ethereum transaction, otherwise null. */
    public java.math.BigDecimal getGasPrice() {
        return mGasPrice;
    }

    /** Ethereum gas limit if it is Ethereum transaction, otherwise null. */
    public Integer getGasLimit() {
        return mGasLimit;
    }

    /**
     * Amount in fiat currencies at the time of the transaction submission.
     * @see CurrencyCode
     */
    public HashMap<String, java.math.BigDecimal> getFiatAmount() {
        return mFiatAmount;
    }

    /**
     * Fee in fiat currencies at the time of the transaction submission.
     * @see CurrencyCode
     */
    public HashMap<String, java.math.BigDecimal> getFiatFee() {
        return mFiatFee;
    }

    @Override
    public boolean equals(Object obj) {
        if (!(obj instanceof TransactionCryptoProperties)) {
            return false;
        }
        TransactionCryptoProperties other = (TransactionCryptoProperties) obj;
        return ((this.mTxHash == null && other.mTxHash == null) || (this.mTxHash != null && this.mTxHash.equals(other.mTxHash))) &&
                ((this.mNonce == null && other.mNonce == null) || (this.mNonce != null && this.mNonce.equals(other.mNonce))) &&
                this.mFromAddress.equals(other.mFromAddress) &&
                ((this.mToAddress == null && other.mToAddress == null) || (this.mToAddress != null && this.mToAddress.equals(other.mToAddress))) &&
                ((this.mData == null && other.mData == null) || (this.mData != null && this.mData.equals(other.mData))) &&
                ((this.mGasPrice == null && other.mGasPrice == null) || (this.mGasPrice != null && this.mGasPrice.equals(other.mGasPrice))) &&
                ((this.mGasLimit == null && other.mGasLimit == null) || (this.mGasLimit != null && this.mGasLimit.equals(other.mGasLimit))) &&
                this.mFiatAmount.equals(other.mFiatAmount) &&
                this.mFiatFee.equals(other.mFiatFee);
    }

    @Override
    public int hashCode() {
        // Pick an arbitrary non-zero starting value
        int hashCode = 17;
        hashCode = hashCode * 31 + (mTxHash == null ? 0 : mTxHash.hashCode());
        hashCode = hashCode * 31 + (mNonce == null ? 0 : mNonce.hashCode());
        hashCode = hashCode * 31 + mFromAddress.hashCode();
        hashCode = hashCode * 31 + (mToAddress == null ? 0 : mToAddress.hashCode());
        hashCode = hashCode * 31 + (mData == null ? 0 : mData.hashCode());
        hashCode = hashCode * 31 + (mGasPrice == null ? 0 : mGasPrice.hashCode());
        hashCode = hashCode * 31 + (mGasLimit == null ? 0 : mGasLimit.hashCode());
        hashCode = hashCode * 31 + mFiatAmount.hashCode();
        hashCode = hashCode * 31 + mFiatFee.hashCode();
        return hashCode;
    }

    @Override
    public String toString() {
        return "TransactionCryptoProperties{" +
                "mTxHash=" + mTxHash +
                "," + "mNonce=" + mNonce +
                "," + "mFromAddress=" + mFromAddress +
                "," + "mToAddress=" + mToAddress +
                "," + "mData=" + mData +
                "," + "mGasPrice=" + mGasPrice +
                "," + "mGasLimit=" + mGasLimit +
                "," + "mFiatAmount=" + mFiatAmount +
                "," + "mFiatFee=" + mFiatFee +
        "}";
    }

}
