// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from state.djinni

package money.zumo.zumokit;

/** Record containing transaction details. */
public final class Transaction {


    /*package*/ final String mId;

    /*package*/ final String mType;

    /*package*/ final String mCurrencyCode;

    /*package*/ final String mFromUserId;

    /*package*/ final String mToUserId;

    /*package*/ final String mFromAccountId;

    /*package*/ final String mToAccountId;

    /*package*/ final String mNetwork;

    /*package*/ final String mStatus;

    /*package*/ final java.math.BigDecimal mAmount;

    /*package*/ final java.math.BigDecimal mFee;

    /*package*/ final String mNonce;

    /*package*/ final TransactionCryptoProperties mCryptoProperties;

    /*package*/ final TransactionFiatProperties mFiatProperties;

    /*package*/ final Long mSubmittedAt;

    /*package*/ final Long mConfirmedAt;

    /*package*/ final long mTimestamp;

    public Transaction(
            String id,
            String type,
            String currencyCode,
            String fromUserId,
            String toUserId,
            String fromAccountId,
            String toAccountId,
            String network,
            String status,
            java.math.BigDecimal amount,
            java.math.BigDecimal fee,
            String nonce,
            TransactionCryptoProperties cryptoProperties,
            TransactionFiatProperties fiatProperties,
            Long submittedAt,
            Long confirmedAt,
            long timestamp) {
        this.mId = id;
        this.mType = type;
        this.mCurrencyCode = currencyCode;
        this.mFromUserId = fromUserId;
        this.mToUserId = toUserId;
        this.mFromAccountId = fromAccountId;
        this.mToAccountId = toAccountId;
        this.mNetwork = network;
        this.mStatus = status;
        this.mAmount = amount;
        this.mFee = fee;
        this.mNonce = nonce;
        this.mCryptoProperties = cryptoProperties;
        this.mFiatProperties = fiatProperties;
        this.mSubmittedAt = submittedAt;
        this.mConfirmedAt = confirmedAt;
        this.mTimestamp = timestamp;
    }

    /** Identifier. */
    public String getId() {
        return mId;
    }

    /**
     * Transaction type.
     * @see TransactionType
     */
    public String getType() {
        return mType;
    }

    /**
     * Currency code.
     * @see CurrencyCode
     */
    public String getCurrencyCode() {
        return mCurrencyCode;
    }

    /** Sender integrator user identifier or null if it is external user. */
    public String getFromUserId() {
        return mFromUserId;
    }

    /** Recipient integrator user identifier or null if it is external user. */
    public String getToUserId() {
        return mToUserId;
    }

    /** Sender account identifier if it is internal transaction or null otherwise. */
    public String getFromAccountId() {
        return mFromAccountId;
    }

    /** Recipient account identifier if it is internal transaction or null otherwise. */
    public String getToAccountId() {
        return mToAccountId;
    }

    /**
     * Network type.
     * @see NetworkType
     */
    public String getNetwork() {
        return mNetwork;
    }

    /**
     * Transaction status.
     * @see TransactionStatus
     */
    public String getStatus() {
        return mStatus;
    }

    /** Amount in transaction currency or null if transaction is Ethereum contract deploy. */
    public java.math.BigDecimal getAmount() {
        return mAmount;
    }

    /** Transaction fee in transaction currency or null, if not yet available. */
    public java.math.BigDecimal getFee() {
        return mFee;
    }

    /** Transaction nonce or null. Used to prevent double spend. */
    public String getNonce() {
        return mNonce;
    }

    /** Crypto properties if it is crypto transaction, null otherwise. */
    public TransactionCryptoProperties getCryptoProperties() {
        return mCryptoProperties;
    }

    /** Fiat properties if it is crypto transaction, null otherwise. */
    public TransactionFiatProperties getFiatProperties() {
        return mFiatProperties;
    }

    /** Epoch timestamp when transaction was submitted or null for incoming transactions from outside of Zumo ecosystem. */
    public Long getSubmittedAt() {
        return mSubmittedAt;
    }

    /** Epoch timestamp when transaction was submitted or null if transaction was not confirmed yet. */
    public Long getConfirmedAt() {
        return mConfirmedAt;
    }

    /** Epoch timestamp, minimum non-null value between submitted at and confirmed at timestamps. */
    public long getTimestamp() {
        return mTimestamp;
    }

    @Override
    public boolean equals(Object obj) {
        if (!(obj instanceof Transaction)) {
            return false;
        }
        Transaction other = (Transaction) obj;
        return this.mId.equals(other.mId) &&
                this.mType.equals(other.mType) &&
                this.mCurrencyCode.equals(other.mCurrencyCode) &&
                ((this.mFromUserId == null && other.mFromUserId == null) || (this.mFromUserId != null && this.mFromUserId.equals(other.mFromUserId))) &&
                ((this.mToUserId == null && other.mToUserId == null) || (this.mToUserId != null && this.mToUserId.equals(other.mToUserId))) &&
                ((this.mFromAccountId == null && other.mFromAccountId == null) || (this.mFromAccountId != null && this.mFromAccountId.equals(other.mFromAccountId))) &&
                ((this.mToAccountId == null && other.mToAccountId == null) || (this.mToAccountId != null && this.mToAccountId.equals(other.mToAccountId))) &&
                this.mNetwork.equals(other.mNetwork) &&
                this.mStatus.equals(other.mStatus) &&
                ((this.mAmount == null && other.mAmount == null) || (this.mAmount != null && this.mAmount.equals(other.mAmount))) &&
                ((this.mFee == null && other.mFee == null) || (this.mFee != null && this.mFee.equals(other.mFee))) &&
                ((this.mNonce == null && other.mNonce == null) || (this.mNonce != null && this.mNonce.equals(other.mNonce))) &&
                ((this.mCryptoProperties == null && other.mCryptoProperties == null) || (this.mCryptoProperties != null && this.mCryptoProperties.equals(other.mCryptoProperties))) &&
                ((this.mFiatProperties == null && other.mFiatProperties == null) || (this.mFiatProperties != null && this.mFiatProperties.equals(other.mFiatProperties))) &&
                ((this.mSubmittedAt == null && other.mSubmittedAt == null) || (this.mSubmittedAt != null && this.mSubmittedAt.equals(other.mSubmittedAt))) &&
                ((this.mConfirmedAt == null && other.mConfirmedAt == null) || (this.mConfirmedAt != null && this.mConfirmedAt.equals(other.mConfirmedAt))) &&
                this.mTimestamp == other.mTimestamp;
    }

    @Override
    public int hashCode() {
        // Pick an arbitrary non-zero starting value
        int hashCode = 17;
        hashCode = hashCode * 31 + mId.hashCode();
        hashCode = hashCode * 31 + mType.hashCode();
        hashCode = hashCode * 31 + mCurrencyCode.hashCode();
        hashCode = hashCode * 31 + (mFromUserId == null ? 0 : mFromUserId.hashCode());
        hashCode = hashCode * 31 + (mToUserId == null ? 0 : mToUserId.hashCode());
        hashCode = hashCode * 31 + (mFromAccountId == null ? 0 : mFromAccountId.hashCode());
        hashCode = hashCode * 31 + (mToAccountId == null ? 0 : mToAccountId.hashCode());
        hashCode = hashCode * 31 + mNetwork.hashCode();
        hashCode = hashCode * 31 + mStatus.hashCode();
        hashCode = hashCode * 31 + (mAmount == null ? 0 : mAmount.hashCode());
        hashCode = hashCode * 31 + (mFee == null ? 0 : mFee.hashCode());
        hashCode = hashCode * 31 + (mNonce == null ? 0 : mNonce.hashCode());
        hashCode = hashCode * 31 + (mCryptoProperties == null ? 0 : mCryptoProperties.hashCode());
        hashCode = hashCode * 31 + (mFiatProperties == null ? 0 : mFiatProperties.hashCode());
        hashCode = hashCode * 31 + (mSubmittedAt == null ? 0 : mSubmittedAt.hashCode());
        hashCode = hashCode * 31 + (mConfirmedAt == null ? 0 : mConfirmedAt.hashCode());
        hashCode = hashCode * 31 + ((int) (mTimestamp ^ (mTimestamp >>> 32)));
        return hashCode;
    }

    @Override
    public String toString() {
        return "Transaction{" +
                "mId=" + mId +
                "," + "mType=" + mType +
                "," + "mCurrencyCode=" + mCurrencyCode +
                "," + "mFromUserId=" + mFromUserId +
                "," + "mToUserId=" + mToUserId +
                "," + "mFromAccountId=" + mFromAccountId +
                "," + "mToAccountId=" + mToAccountId +
                "," + "mNetwork=" + mNetwork +
                "," + "mStatus=" + mStatus +
                "," + "mAmount=" + mAmount +
                "," + "mFee=" + mFee +
                "," + "mNonce=" + mNonce +
                "," + "mCryptoProperties=" + mCryptoProperties +
                "," + "mFiatProperties=" + mFiatProperties +
                "," + "mSubmittedAt=" + mSubmittedAt +
                "," + "mConfirmedAt=" + mConfirmedAt +
                "," + "mTimestamp=" + mTimestamp +
        "}";
    }

}
