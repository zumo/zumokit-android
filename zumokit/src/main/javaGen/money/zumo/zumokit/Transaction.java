// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from records.djinni

package money.zumo.zumokit;

import java.util.ArrayList;

/** Record containing transaction details. */
public final class Transaction {


    /*package*/ final String mId;

    /*package*/ final String mType;

    /*package*/ final String mCurrencyCode;

    /*package*/ final String mDirection;

    /*package*/ final String mNetwork;

    /*package*/ final String mStatus;

    /*package*/ final java.math.BigDecimal mAmount;

    /*package*/ final java.math.BigDecimal mFee;

    /*package*/ final String mNonce;

    /*package*/ final ArrayList<TransactionAmount> mSenders;

    /*package*/ final ArrayList<TransactionAmount> mRecipients;

    /*package*/ final ArrayList<InternalTransaction> mInternalTransactions;

    /*package*/ final TransactionCryptoProperties mCryptoProperties;

    /*package*/ final TransactionFiatProperties mFiatProperties;

    /*package*/ final TransactionCardProperties mCardProperties;

    /*package*/ final Exchange mExchange;

    /*package*/ final String mMetadata;

    /*package*/ final Integer mSubmittedAt;

    /*package*/ final Integer mConfirmedAt;

    /*package*/ final int mTimestamp;

    public Transaction(
            String id,
            String type,
            String currencyCode,
            String direction,
            String network,
            String status,
            java.math.BigDecimal amount,
            java.math.BigDecimal fee,
            String nonce,
            ArrayList<TransactionAmount> senders,
            ArrayList<TransactionAmount> recipients,
            ArrayList<InternalTransaction> internalTransactions,
            TransactionCryptoProperties cryptoProperties,
            TransactionFiatProperties fiatProperties,
            TransactionCardProperties cardProperties,
            Exchange exchange,
            String metadata,
            Integer submittedAt,
            Integer confirmedAt,
            int timestamp) {
        this.mId = id;
        this.mType = type;
        this.mCurrencyCode = currencyCode;
        this.mDirection = direction;
        this.mNetwork = network;
        this.mStatus = status;
        this.mAmount = amount;
        this.mFee = fee;
        this.mNonce = nonce;
        this.mSenders = senders;
        this.mRecipients = recipients;
        this.mInternalTransactions = internalTransactions;
        this.mCryptoProperties = cryptoProperties;
        this.mFiatProperties = fiatProperties;
        this.mCardProperties = cardProperties;
        this.mExchange = exchange;
        this.mMetadata = metadata;
        this.mSubmittedAt = submittedAt;
        this.mConfirmedAt = confirmedAt;
        this.mTimestamp = timestamp;
    }

    /** Identifier. */
    public String getId() {
        return mId;
    }

    /**
     * Transaction type.
     * @see TransactionType
     */
    public String getType() {
        return mType;
    }

    /**
     * Currency code.
     * @see CurrencyCode
     */
    public String getCurrencyCode() {
        return mCurrencyCode;
    }

    /**
     * Transaction direction relative to {@link  AccountDataSnapshot AccountDataSnapshot} .
     * @see TransactionDirection
     */
    public String getDirection() {
        return mDirection;
    }

    /**
     * Network type.
     * @see NetworkType
     */
    public String getNetwork() {
        return mNetwork;
    }

    /**
     * Transaction status.
     * @see TransactionStatus
     */
    public String getStatus() {
        return mStatus;
    }

    /**
     * Amount in transaction currency or null if transaction is Ethereum contract deploy.
     * Amount is calculated as transaction amount sent - transaction amounts received - change.
     */
    public java.math.BigDecimal getAmount() {
        return mAmount;
    }

    /** Transaction fee in transaction currency or null, if not yet available. */
    public java.math.BigDecimal getFee() {
        return mFee;
    }

    /** Transaction nonce or null. Used to prevent double spend. */
    public String getNonce() {
        return mNonce;
    }

    /** Transaction senders. */
    public ArrayList<TransactionAmount> getSenders() {
        return mSenders;
    }

    /** Transaction recipients. */
    public ArrayList<TransactionAmount> getRecipients() {
        return mRecipients;
    }

    /** Internal transactions, e.g. ETH contract interaction side effects. */
    public ArrayList<InternalTransaction> getInternalTransactions() {
        return mInternalTransactions;
    }

    /**
     * Crypto properties if it is a crypto transaction, null otherwise.
     * @see TransactionType
     */
    public TransactionCryptoProperties getCryptoProperties() {
        return mCryptoProperties;
    }

    /**
     * Fiat properties if it is a fiat transaction, null otherwise.
     * @see TransactionType
     */
    public TransactionFiatProperties getFiatProperties() {
        return mFiatProperties;
    }

    /**
     * Card properties if it is a card transaction, null otherwise.
     * @see TransactionType
     */
    public TransactionCardProperties getCardProperties() {
        return mCardProperties;
    }

    /**
     * Exchange properties if it is a transaction associated with an exchange, null otherwise.
     * @see TransactionType
     */
    public Exchange getExchange() {
        return mExchange;
    }

    /** Transaction metadata if exists, null otherwise. */
    public String getMetadata() {
        return mMetadata;
    }

    /** Epoch timestamp when transaction was submitted or null for incoming transactions from outside of Zumo ecosystem. */
    public Integer getSubmittedAt() {
        return mSubmittedAt;
    }

    /** Epoch timestamp when transaction was submitted or null if transaction was not confirmed yet. */
    public Integer getConfirmedAt() {
        return mConfirmedAt;
    }

    /** Epoch timestamp, minimum non-null value between submitted at and confirmed at timestamps. */
    public int getTimestamp() {
        return mTimestamp;
    }

    @Override
    public boolean equals(Object obj) {
        if (!(obj instanceof Transaction)) {
            return false;
        }
        Transaction other = (Transaction) obj;
        return this.mId.equals(other.mId) &&
                this.mType.equals(other.mType) &&
                this.mCurrencyCode.equals(other.mCurrencyCode) &&
                this.mDirection.equals(other.mDirection) &&
                this.mNetwork.equals(other.mNetwork) &&
                this.mStatus.equals(other.mStatus) &&
                ((this.mAmount == null && other.mAmount == null) || (this.mAmount != null && this.mAmount.equals(other.mAmount))) &&
                ((this.mFee == null && other.mFee == null) || (this.mFee != null && this.mFee.equals(other.mFee))) &&
                ((this.mNonce == null && other.mNonce == null) || (this.mNonce != null && this.mNonce.equals(other.mNonce))) &&
                this.mSenders.equals(other.mSenders) &&
                this.mRecipients.equals(other.mRecipients) &&
                this.mInternalTransactions.equals(other.mInternalTransactions) &&
                ((this.mCryptoProperties == null && other.mCryptoProperties == null) || (this.mCryptoProperties != null && this.mCryptoProperties.equals(other.mCryptoProperties))) &&
                ((this.mFiatProperties == null && other.mFiatProperties == null) || (this.mFiatProperties != null && this.mFiatProperties.equals(other.mFiatProperties))) &&
                ((this.mCardProperties == null && other.mCardProperties == null) || (this.mCardProperties != null && this.mCardProperties.equals(other.mCardProperties))) &&
                ((this.mExchange == null && other.mExchange == null) || (this.mExchange != null && this.mExchange.equals(other.mExchange))) &&
                ((this.mMetadata == null && other.mMetadata == null) || (this.mMetadata != null && this.mMetadata.equals(other.mMetadata))) &&
                ((this.mSubmittedAt == null && other.mSubmittedAt == null) || (this.mSubmittedAt != null && this.mSubmittedAt.equals(other.mSubmittedAt))) &&
                ((this.mConfirmedAt == null && other.mConfirmedAt == null) || (this.mConfirmedAt != null && this.mConfirmedAt.equals(other.mConfirmedAt))) &&
                this.mTimestamp == other.mTimestamp;
    }

    @Override
    public int hashCode() {
        // Pick an arbitrary non-zero starting value
        int hashCode = 17;
        hashCode = hashCode * 31 + mId.hashCode();
        hashCode = hashCode * 31 + mType.hashCode();
        hashCode = hashCode * 31 + mCurrencyCode.hashCode();
        hashCode = hashCode * 31 + mDirection.hashCode();
        hashCode = hashCode * 31 + mNetwork.hashCode();
        hashCode = hashCode * 31 + mStatus.hashCode();
        hashCode = hashCode * 31 + (mAmount == null ? 0 : mAmount.hashCode());
        hashCode = hashCode * 31 + (mFee == null ? 0 : mFee.hashCode());
        hashCode = hashCode * 31 + (mNonce == null ? 0 : mNonce.hashCode());
        hashCode = hashCode * 31 + mSenders.hashCode();
        hashCode = hashCode * 31 + mRecipients.hashCode();
        hashCode = hashCode * 31 + mInternalTransactions.hashCode();
        hashCode = hashCode * 31 + (mCryptoProperties == null ? 0 : mCryptoProperties.hashCode());
        hashCode = hashCode * 31 + (mFiatProperties == null ? 0 : mFiatProperties.hashCode());
        hashCode = hashCode * 31 + (mCardProperties == null ? 0 : mCardProperties.hashCode());
        hashCode = hashCode * 31 + (mExchange == null ? 0 : mExchange.hashCode());
        hashCode = hashCode * 31 + (mMetadata == null ? 0 : mMetadata.hashCode());
        hashCode = hashCode * 31 + (mSubmittedAt == null ? 0 : mSubmittedAt.hashCode());
        hashCode = hashCode * 31 + (mConfirmedAt == null ? 0 : mConfirmedAt.hashCode());
        hashCode = hashCode * 31 + mTimestamp;
        return hashCode;
    }

    @Override
    public String toString() {
        return "Transaction{" +
                "mId=" + mId +
                "," + "mType=" + mType +
                "," + "mCurrencyCode=" + mCurrencyCode +
                "," + "mDirection=" + mDirection +
                "," + "mNetwork=" + mNetwork +
                "," + "mStatus=" + mStatus +
                "," + "mAmount=" + mAmount +
                "," + "mFee=" + mFee +
                "," + "mNonce=" + mNonce +
                "," + "mSenders=" + mSenders +
                "," + "mRecipients=" + mRecipients +
                "," + "mInternalTransactions=" + mInternalTransactions +
                "," + "mCryptoProperties=" + mCryptoProperties +
                "," + "mFiatProperties=" + mFiatProperties +
                "," + "mCardProperties=" + mCardProperties +
                "," + "mExchange=" + mExchange +
                "," + "mMetadata=" + mMetadata +
                "," + "mSubmittedAt=" + mSubmittedAt +
                "," + "mConfirmedAt=" + mConfirmedAt +
                "," + "mTimestamp=" + mTimestamp +
        "}";
    }

}
