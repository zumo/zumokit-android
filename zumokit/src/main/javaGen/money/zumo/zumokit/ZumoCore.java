// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from zumo_core.djinni

package money.zumo.zumokit;

import java.util.HashMap;
import java.util.concurrent.atomic.AtomicBoolean;

/** Entry point to ZumoKit C++ SDK */
public interface ZumoCore {
    /**
     * Authenticates user token set and returns corresponding user. On success user is set as active user.
     * Refer to <a href="https://developers.zumo.money/docs/setup/server#get-zumokit-user-token">Server</a> guide for details on how to get user token set.
     *
     * @param userTokenSet   user token set
     * @param callback         an interface to receive the result or error
     *
     * @see User
     */
    public void authUser(String userTokenSet, UserCallback callback);

    /**
     * Get active user if exists.
     *
     * @return active user or null
     */
    public User getActiveUser();

    /**
     * Get crypto utils class.
     *
     * @return crypto utils
     */
    public Utils getUtils();

    /**
     * Get exchange rate for selected currency pair.
     *
     * @param fromCurrency   currency code
     * @param toCurrency     currency code
     *
     * @return exchange rate or null
     */
    public ExchangeRate getExchangeRate(String fromCurrency, String toCurrency);

    /**
     * Get all available exchange rates.
     *
     * @return mapping between currency pairs and exchange rates
     */
    public HashMap<String, HashMap<String, ExchangeRate>> getExchangeRates();

    /**
     * Get exchange setting for selected currency pair.
     *
     * @param fromCurrency   currency code
     * @param toCurrency     currency code
     *
     * @return exchange setting or null
     */
    public ExchangeSetting getExchangeSetting(String fromCurrency, String toCurrency);

    /**
     * Get all available exchange settings.
     *
     * @return mapping between currency pairs and exchange settings
     */
    public HashMap<String, HashMap<String, ExchangeSetting>> getExchangeSettings();

    /**
     * Get transaction fee rates for selected crypto currency.
     *
     * @param currency currency code
     *
     * @return transaction fee rate or null
     */
    public TransactionFeeRate getTransactionFeeRate(String currency);

    /**
     * Get all available crypto transaction fee rates.
     *
     * @return mapping between cryptocurrencies and transaction fee rate
     */
    public HashMap<String, TransactionFeeRate> getTransactionFeeRates();

    /**
     * Fetch historical exchange rates for supported time intervals.
     * On success callback returns historical exchange rates are contained in a mapping between
     * time interval on a top level, from currency on second level, to currency on third level and {@link  ExchangeRate ExchangeRate} objects.
     *
     * @param callback         an interface to receive the result or error
     *
     * @see TimeInterval
     */
    public void fetchHistoricalExchangeRates(HistoricalExchangeRatesCallback callback);

    /**
     * Listen to changes in exchange rates, exchange settings or transaction fee rates.
     * @param listener interface to listen to changes
     */
    public void addChangeListener(ChangeListener listener);

    /**
     * Remove change listener.
     * @param listener interface to listen to changes
     */
    public void removeChangeListener(ChangeListener listener);

    /**
     * Get ZumoKit SDK version.
     * @return semantic version tag if exists, commit hash otherwise
     */
    public static String getVersion()
    {
        return CppProxy.getVersion();
    }

    /**
     * Initializes ZumoKit SDK. Should only be called once.
     *
     * @param httpImpl        HTTP implementation
     * @param wsImpl          WebSocet implementation
     * @param apiKey          ZumoKit Api-Key
     * @param apiUrl         ZumoKit API url
     * @param txServiceUrl  ZumoKit Transaction Service url
     *
     * @return ZumoKit instance
     */
    public static ZumoCore init(HttpImpl httpImpl, WebSocketImpl wsImpl, String apiKey, String apiUrl, String txServiceUrl)
    {
        return CppProxy.init(httpImpl,
                             wsImpl,
                             apiKey,
                             apiUrl,
                             txServiceUrl);
    }

    static final class CppProxy implements ZumoCore
    {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
        }

        private native void nativeDestroy(long nativeRef);
        public void _djinni_private_destroy()
        {
            boolean destroyed = this.destroyed.getAndSet(true);
            if (!destroyed) nativeDestroy(this.nativeRef);
        }
        protected void finalize() throws java.lang.Throwable
        {
            _djinni_private_destroy();
            super.finalize();
        }

        @Override
        public void authUser(String userTokenSet, UserCallback callback)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_authUser(this.nativeRef, userTokenSet, callback);
        }
        private native void native_authUser(long _nativeRef, String userTokenSet, UserCallback callback);

        @Override
        public User getActiveUser()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getActiveUser(this.nativeRef);
        }
        private native User native_getActiveUser(long _nativeRef);

        @Override
        public Utils getUtils()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getUtils(this.nativeRef);
        }
        private native Utils native_getUtils(long _nativeRef);

        @Override
        public ExchangeRate getExchangeRate(String fromCurrency, String toCurrency)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getExchangeRate(this.nativeRef, fromCurrency, toCurrency);
        }
        private native ExchangeRate native_getExchangeRate(long _nativeRef, String fromCurrency, String toCurrency);

        @Override
        public HashMap<String, HashMap<String, ExchangeRate>> getExchangeRates()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getExchangeRates(this.nativeRef);
        }
        private native HashMap<String, HashMap<String, ExchangeRate>> native_getExchangeRates(long _nativeRef);

        @Override
        public ExchangeSetting getExchangeSetting(String fromCurrency, String toCurrency)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getExchangeSetting(this.nativeRef, fromCurrency, toCurrency);
        }
        private native ExchangeSetting native_getExchangeSetting(long _nativeRef, String fromCurrency, String toCurrency);

        @Override
        public HashMap<String, HashMap<String, ExchangeSetting>> getExchangeSettings()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getExchangeSettings(this.nativeRef);
        }
        private native HashMap<String, HashMap<String, ExchangeSetting>> native_getExchangeSettings(long _nativeRef);

        @Override
        public TransactionFeeRate getTransactionFeeRate(String currency)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getTransactionFeeRate(this.nativeRef, currency);
        }
        private native TransactionFeeRate native_getTransactionFeeRate(long _nativeRef, String currency);

        @Override
        public HashMap<String, TransactionFeeRate> getTransactionFeeRates()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getTransactionFeeRates(this.nativeRef);
        }
        private native HashMap<String, TransactionFeeRate> native_getTransactionFeeRates(long _nativeRef);

        @Override
        public void fetchHistoricalExchangeRates(HistoricalExchangeRatesCallback callback)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_fetchHistoricalExchangeRates(this.nativeRef, callback);
        }
        private native void native_fetchHistoricalExchangeRates(long _nativeRef, HistoricalExchangeRatesCallback callback);

        @Override
        public void addChangeListener(ChangeListener listener)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_addChangeListener(this.nativeRef, listener);
        }
        private native void native_addChangeListener(long _nativeRef, ChangeListener listener);

        @Override
        public void removeChangeListener(ChangeListener listener)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_removeChangeListener(this.nativeRef, listener);
        }
        private native void native_removeChangeListener(long _nativeRef, ChangeListener listener);

        public static native String getVersion();

        public static native ZumoCore init(HttpImpl httpImpl, WebSocketImpl wsImpl, String apiKey, String apiUrl, String txServiceUrl);
    }
}
