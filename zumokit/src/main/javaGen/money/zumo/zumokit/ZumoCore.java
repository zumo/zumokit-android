// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from zumo_core.djinni

package money.zumo.zumokit;

import java.util.concurrent.atomic.AtomicBoolean;

/** Entry point to ZumoKit C++ SDK */
public interface ZumoCore {
    /**
     * Get user corresponding to user token set.
     * Refer to <a href="https://developers.zumo.money/docs/setup/server#get-zumokit-user-token">Server</a> guide for details on how to get user token set.
     *
     * @param userTokenSet   user token set
     * @param callback         an interface to receive the result or error
     *
     * @see User
     */
    public void getUser(String userTokenSet, UserCallback callback);

    /**
     * Get crypto utils class.
     *
     * @return crypto utils
     */
    public Utils getUtils();

    /**
     * Fetch historical exchange rates for supported time intervals.
     * On success callback returns historical exchange rates are contained in a mapping between
     * time interval on a top level, from currency on second level, to currency on third level and {@link  ExchangeRate ExchangeRate} objects.
     *
     * @param callback         an interface to receive the result or error
     *
     * @see HistoricalExchangeRatesInterval
     */
    public void getHistoricalExchangeRates(HistoricalExchangeRatesCallback callback);

    /**
     * Returns current ZumoKit state. Refer to <a href="https://developers.zumo.money/docs/guides/zumokit-state">ZumoKit State</a> guide for details.
     *
     * @return current ZumoKit state
     */
    public State getState();

    /**
     * Listen to all state changes. Refer to <a href="https://developers.zumo.money/docs/guides/zumokit-state#listen-to-state-changes">ZumoKit State</a> guide for details.
     *
     * @param listener interface to listen to state changes
     */
    public void addStateListener(StateListener listener);

    /**
     * Remove listener to state changes. Refer to <a href="https://developers.zumo.money/docs/guides/zumokit-state#remove-state-listener">ZumoKit State</a> guide for details.
     *
     * @param listener interface to listen to state changes
     */
    public void removeStateListener(StateListener listener);

    /**
     * Get ZumoKit SDK version.
     * @return semantic version tag if exists, commit hash otherwise
     */
    public static String getVersion()
    {
        return CppProxy.getVersion();
    }

    /**
     * Initializes ZumoKit SDK. Should only be called once.
     *
     * @param httpImpl        HTTP implementation
     * @param wsImpl          WebSocet implementation
     * @param apiKey          ZumoKit Api-Key
     * @param apiRoot         ZumoKit API url
     * @param txServiceRoot  ZumoKit Transaction Service url
     *
     * @return ZumoKit instance
     */
    public static ZumoCore init(HttpImpl httpImpl, WebSocketImpl wsImpl, String apiKey, String apiRoot, String txServiceRoot)
    {
        return CppProxy.init(httpImpl,
                             wsImpl,
                             apiKey,
                             apiRoot,
                             txServiceRoot);
    }

    static final class CppProxy implements ZumoCore
    {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
        }

        private native void nativeDestroy(long nativeRef);
        public void _djinni_private_destroy()
        {
            boolean destroyed = this.destroyed.getAndSet(true);
            if (!destroyed) nativeDestroy(this.nativeRef);
        }
        protected void finalize() throws java.lang.Throwable
        {
            _djinni_private_destroy();
            super.finalize();
        }

        @Override
        public void getUser(String userTokenSet, UserCallback callback)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_getUser(this.nativeRef, userTokenSet, callback);
        }
        private native void native_getUser(long _nativeRef, String userTokenSet, UserCallback callback);

        @Override
        public Utils getUtils()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getUtils(this.nativeRef);
        }
        private native Utils native_getUtils(long _nativeRef);

        @Override
        public void getHistoricalExchangeRates(HistoricalExchangeRatesCallback callback)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_getHistoricalExchangeRates(this.nativeRef, callback);
        }
        private native void native_getHistoricalExchangeRates(long _nativeRef, HistoricalExchangeRatesCallback callback);

        @Override
        public State getState()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getState(this.nativeRef);
        }
        private native State native_getState(long _nativeRef);

        @Override
        public void addStateListener(StateListener listener)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_addStateListener(this.nativeRef, listener);
        }
        private native void native_addStateListener(long _nativeRef, StateListener listener);

        @Override
        public void removeStateListener(StateListener listener)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_removeStateListener(this.nativeRef, listener);
        }
        private native void native_removeStateListener(long _nativeRef, StateListener listener);

        public static native String getVersion();

        public static native ZumoCore init(HttpImpl httpImpl, WebSocketImpl wsImpl, String apiKey, String apiRoot, String txServiceRoot);
    }
}
