// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from records.djinni

package money.zumo.zumokit;

import java.util.HashMap;

/** Record containing exchange details. */
public final class Exchange {


    /*package*/ final String mId;

    /*package*/ final String mStatus;

    /*package*/ final String mPair;

    /*package*/ final String mSide;

    /*package*/ final java.math.BigDecimal mPrice;

    /*package*/ final java.math.BigDecimal mAmount;

    /*package*/ final String mDebitAccountId;

    /*package*/ final String mDebitTransactionId;

    /*package*/ final String mCreditAccountId;

    /*package*/ final String mCreditTransactionId;

    /*package*/ final Quote mQuote;

    /*package*/ final HashMap<String, HashMap<String, java.math.BigDecimal>> mRates;

    /*package*/ final String mNonce;

    /*package*/ final String mCreatedAt;

    /*package*/ final String mUpdatedAt;

    public Exchange(
            String id,
            String status,
            String pair,
            String side,
            java.math.BigDecimal price,
            java.math.BigDecimal amount,
            String debitAccountId,
            String debitTransactionId,
            String creditAccountId,
            String creditTransactionId,
            Quote quote,
            HashMap<String, HashMap<String, java.math.BigDecimal>> rates,
            String nonce,
            String createdAt,
            String updatedAt) {
        this.mId = id;
        this.mStatus = status;
        this.mPair = pair;
        this.mSide = side;
        this.mPrice = price;
        this.mAmount = amount;
        this.mDebitAccountId = debitAccountId;
        this.mDebitTransactionId = debitTransactionId;
        this.mCreditAccountId = creditAccountId;
        this.mCreditTransactionId = creditTransactionId;
        this.mQuote = quote;
        this.mRates = rates;
        this.mNonce = nonce;
        this.mCreatedAt = createdAt;
        this.mUpdatedAt = updatedAt;
    }

    /** Identifier */
    public String getId() {
        return mId;
    }

    /**
     * Exchange status.
     * @see ExchangeStatus
     */
    public String getStatus() {
        return mStatus;
    }

    /** Exchange pair, e.g. "ETH-GBP". */
    public String getPair() {
        return mPair;
    }

    /**
     * Exchange side, "BUY" or "SELL".
     * @see ExchangeSide
     */
    public String getSide() {
        return mSide;
    }

    /** Exchange quote price. */
    public java.math.BigDecimal getPrice() {
        return mPrice;
    }

    /** Amount in base currency. */
    public java.math.BigDecimal getAmount() {
        return mAmount;
    }

    /** Debit {@link  Account Account} identifier. */
    public String getDebitAccountId() {
        return mDebitAccountId;
    }

    /** Debit {@link  Transaction Transaction} identifier. */
    public String getDebitTransactionId() {
        return mDebitTransactionId;
    }

    /** Credit {@link  Account Account} identifier. */
    public String getCreditAccountId() {
        return mCreditAccountId;
    }

    /** Credit {@link  Transaction Transaction} identifier. */
    public String getCreditTransactionId() {
        return mCreditTransactionId;
    }

    /** Exchange rate quote used. */
    public Quote getQuote() {
        return mQuote;
    }

    /**
     * Exchange rates at the time exchange was made.
     * This can be used to display amounts in local currency to the user.
     */
    public HashMap<String, HashMap<String, java.math.BigDecimal>> getRates() {
        return mRates;
    }

    /** Exchange nonce or null. Used to prevent double spend. */
    public String getNonce() {
        return mNonce;
    }

    /** Timestamp when exchange was created, e.g. "2020-07-29T09:46:34.288Z". */
    public String getCreatedAt() {
        return mCreatedAt;
    }

    /** Timestamp when exchange was updated, e.g. "2020-07-29T09:46:34.288Z". */
    public String getUpdatedAt() {
        return mUpdatedAt;
    }

    @Override
    public boolean equals(Object obj) {
        if (!(obj instanceof Exchange)) {
            return false;
        }
        Exchange other = (Exchange) obj;
        return this.mId.equals(other.mId) &&
                this.mStatus.equals(other.mStatus) &&
                this.mPair.equals(other.mPair) &&
                this.mSide.equals(other.mSide) &&
                this.mPrice.equals(other.mPrice) &&
                this.mAmount.equals(other.mAmount) &&
                this.mDebitAccountId.equals(other.mDebitAccountId) &&
                this.mDebitTransactionId.equals(other.mDebitTransactionId) &&
                this.mCreditAccountId.equals(other.mCreditAccountId) &&
                ((this.mCreditTransactionId == null && other.mCreditTransactionId == null) || (this.mCreditTransactionId != null && this.mCreditTransactionId.equals(other.mCreditTransactionId))) &&
                this.mQuote.equals(other.mQuote) &&
                this.mRates.equals(other.mRates) &&
                ((this.mNonce == null && other.mNonce == null) || (this.mNonce != null && this.mNonce.equals(other.mNonce))) &&
                this.mCreatedAt.equals(other.mCreatedAt) &&
                this.mUpdatedAt.equals(other.mUpdatedAt);
    }

    @Override
    public int hashCode() {
        // Pick an arbitrary non-zero starting value
        int hashCode = 17;
        hashCode = hashCode * 31 + mId.hashCode();
        hashCode = hashCode * 31 + mStatus.hashCode();
        hashCode = hashCode * 31 + mPair.hashCode();
        hashCode = hashCode * 31 + mSide.hashCode();
        hashCode = hashCode * 31 + (mPrice.hashCode());
        hashCode = hashCode * 31 + (mAmount.hashCode());
        hashCode = hashCode * 31 + mDebitAccountId.hashCode();
        hashCode = hashCode * 31 + mDebitTransactionId.hashCode();
        hashCode = hashCode * 31 + mCreditAccountId.hashCode();
        hashCode = hashCode * 31 + (mCreditTransactionId == null ? 0 : mCreditTransactionId.hashCode());
        hashCode = hashCode * 31 + mQuote.hashCode();
        hashCode = hashCode * 31 + mRates.hashCode();
        hashCode = hashCode * 31 + (mNonce == null ? 0 : mNonce.hashCode());
        hashCode = hashCode * 31 + mCreatedAt.hashCode();
        hashCode = hashCode * 31 + mUpdatedAt.hashCode();
        return hashCode;
    }

    @Override
    public String toString() {
        return "Exchange{" +
                "mId=" + mId +
                "," + "mStatus=" + mStatus +
                "," + "mPair=" + mPair +
                "," + "mSide=" + mSide +
                "," + "mPrice=" + mPrice +
                "," + "mAmount=" + mAmount +
                "," + "mDebitAccountId=" + mDebitAccountId +
                "," + "mDebitTransactionId=" + mDebitTransactionId +
                "," + "mCreditAccountId=" + mCreditAccountId +
                "," + "mCreditTransactionId=" + mCreditTransactionId +
                "," + "mQuote=" + mQuote +
                "," + "mRates=" + mRates +
                "," + "mNonce=" + mNonce +
                "," + "mCreatedAt=" + mCreatedAt +
                "," + "mUpdatedAt=" + mUpdatedAt +
        "}";
    }

}
