// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from records.djinni

package money.zumo.zumokit;

import java.util.HashMap;

/** Record containing exchange details. */
public final class Exchange {


    /*package*/ final String mId;

    /*package*/ final String mStatus;

    /*package*/ final String mFromCurrency;

    /*package*/ final String mFromAccountId;

    /*package*/ final String mOutgoingTransactionId;

    /*package*/ final String mToCurrency;

    /*package*/ final String mToAccountId;

    /*package*/ final String mReturnTransactionId;

    /*package*/ final java.math.BigDecimal mAmount;

    /*package*/ final java.math.BigDecimal mOutgoingTransactionFee;

    /*package*/ final java.math.BigDecimal mReturnAmount;

    /*package*/ final java.math.BigDecimal mExchangeFee;

    /*package*/ final java.math.BigDecimal mReturnTransactionFee;

    /*package*/ final ExchangeRate mExchangeRate;

    /*package*/ final ExchangeSetting mExchangeSetting;

    /*package*/ final HashMap<String, HashMap<String, ExchangeRate>> mExchangeRates;

    /*package*/ final String mNonce;

    /*package*/ final Integer mSubmittedAt;

    /*package*/ final Integer mConfirmedAt;

    public Exchange(
            String id,
            String status,
            String fromCurrency,
            String fromAccountId,
            String outgoingTransactionId,
            String toCurrency,
            String toAccountId,
            String returnTransactionId,
            java.math.BigDecimal amount,
            java.math.BigDecimal outgoingTransactionFee,
            java.math.BigDecimal returnAmount,
            java.math.BigDecimal exchangeFee,
            java.math.BigDecimal returnTransactionFee,
            ExchangeRate exchangeRate,
            ExchangeSetting exchangeSetting,
            HashMap<String, HashMap<String, ExchangeRate>> exchangeRates,
            String nonce,
            Integer submittedAt,
            Integer confirmedAt) {
        this.mId = id;
        this.mStatus = status;
        this.mFromCurrency = fromCurrency;
        this.mFromAccountId = fromAccountId;
        this.mOutgoingTransactionId = outgoingTransactionId;
        this.mToCurrency = toCurrency;
        this.mToAccountId = toAccountId;
        this.mReturnTransactionId = returnTransactionId;
        this.mAmount = amount;
        this.mOutgoingTransactionFee = outgoingTransactionFee;
        this.mReturnAmount = returnAmount;
        this.mExchangeFee = exchangeFee;
        this.mReturnTransactionFee = returnTransactionFee;
        this.mExchangeRate = exchangeRate;
        this.mExchangeSetting = exchangeSetting;
        this.mExchangeRates = exchangeRates;
        this.mNonce = nonce;
        this.mSubmittedAt = submittedAt;
        this.mConfirmedAt = confirmedAt;
    }

    /** Identifier */
    public String getId() {
        return mId;
    }

    /**
     * Exchange status.
     * @see ExchangeStatus
     */
    public String getStatus() {
        return mStatus;
    }

    /**
     * Currency from which exchange was made.
     * @see CurrencyCode
     */
    public String getFromCurrency() {
        return mFromCurrency;
    }

    /** Source {@link  Account Account} identifier. */
    public String getFromAccountId() {
        return mFromAccountId;
    }

    /** Outgoing {@link  Transaction Transaction} identifier. */
    public String getOutgoingTransactionId() {
        return mOutgoingTransactionId;
    }

    /**
     * Currency to which exchange was made.
     * @see CurrencyCode
     */
    public String getToCurrency() {
        return mToCurrency;
    }

    /** Target {@link  Account Account} identifier. */
    public String getToAccountId() {
        return mToAccountId;
    }

    /** Return {@link  Transaction Transaction} identifier. */
    public String getReturnTransactionId() {
        return mReturnTransactionId;
    }

    /** Amount in deposit currency. */
    public java.math.BigDecimal getAmount() {
        return mAmount;
    }

    /** Outgoing transaction fee. */
    public java.math.BigDecimal getOutgoingTransactionFee() {
        return mOutgoingTransactionFee;
    }

    /**
     * Amount that user receives, calculated as <code>amount X exchangeRate X (1 - feeRate) - returnTransactionFee</code>.
     * @see ExchangeSetting
     */
    public java.math.BigDecimal getReturnAmount() {
        return mReturnAmount;
    }

    /**
     * Exchange fee, calculated as <code>amount X exchangeRate X exchangeFeeRate</code>.
     * @see ExchangeSetting
     */
    public java.math.BigDecimal getExchangeFee() {
        return mExchangeFee;
    }

    /**
     * Return transaction fee.
     * @see ExchangeSetting
     */
    public java.math.BigDecimal getReturnTransactionFee() {
        return mReturnTransactionFee;
    }

    /** Exchange rate used. */
    public ExchangeRate getExchangeRate() {
        return mExchangeRate;
    }

    /** Exchange setting used. */
    public ExchangeSetting getExchangeSetting() {
        return mExchangeSetting;
    }

    /**
     * Exchange rates at the time exchange was made.
     * This can be used to display amounts in local currency to the user.
     */
    public HashMap<String, HashMap<String, ExchangeRate>> getExchangeRates() {
        return mExchangeRates;
    }

    /** Exchange nonce or null. Used to prevent double spend. */
    public String getNonce() {
        return mNonce;
    }

    /** Epoch timestamp when transaction was submitted. */
    public Integer getSubmittedAt() {
        return mSubmittedAt;
    }

    /** Epoch timestamp when transaction was confirmed or null if not yet confirmed. */
    public Integer getConfirmedAt() {
        return mConfirmedAt;
    }

    @Override
    public boolean equals(Object obj) {
        if (!(obj instanceof Exchange)) {
            return false;
        }
        Exchange other = (Exchange) obj;
        return this.mId.equals(other.mId) &&
                this.mStatus.equals(other.mStatus) &&
                this.mFromCurrency.equals(other.mFromCurrency) &&
                this.mFromAccountId.equals(other.mFromAccountId) &&
                ((this.mOutgoingTransactionId == null && other.mOutgoingTransactionId == null) || (this.mOutgoingTransactionId != null && this.mOutgoingTransactionId.equals(other.mOutgoingTransactionId))) &&
                this.mToCurrency.equals(other.mToCurrency) &&
                this.mToAccountId.equals(other.mToAccountId) &&
                ((this.mReturnTransactionId == null && other.mReturnTransactionId == null) || (this.mReturnTransactionId != null && this.mReturnTransactionId.equals(other.mReturnTransactionId))) &&
                this.mAmount.equals(other.mAmount) &&
                ((this.mOutgoingTransactionFee == null && other.mOutgoingTransactionFee == null) || (this.mOutgoingTransactionFee != null && this.mOutgoingTransactionFee.equals(other.mOutgoingTransactionFee))) &&
                this.mReturnAmount.equals(other.mReturnAmount) &&
                this.mExchangeFee.equals(other.mExchangeFee) &&
                this.mReturnTransactionFee.equals(other.mReturnTransactionFee) &&
                this.mExchangeRate.equals(other.mExchangeRate) &&
                this.mExchangeSetting.equals(other.mExchangeSetting) &&
                this.mExchangeRates.equals(other.mExchangeRates) &&
                ((this.mNonce == null && other.mNonce == null) || (this.mNonce != null && this.mNonce.equals(other.mNonce))) &&
                ((this.mSubmittedAt == null && other.mSubmittedAt == null) || (this.mSubmittedAt != null && this.mSubmittedAt.equals(other.mSubmittedAt))) &&
                ((this.mConfirmedAt == null && other.mConfirmedAt == null) || (this.mConfirmedAt != null && this.mConfirmedAt.equals(other.mConfirmedAt)));
    }

    @Override
    public int hashCode() {
        // Pick an arbitrary non-zero starting value
        int hashCode = 17;
        hashCode = hashCode * 31 + mId.hashCode();
        hashCode = hashCode * 31 + mStatus.hashCode();
        hashCode = hashCode * 31 + mFromCurrency.hashCode();
        hashCode = hashCode * 31 + mFromAccountId.hashCode();
        hashCode = hashCode * 31 + (mOutgoingTransactionId == null ? 0 : mOutgoingTransactionId.hashCode());
        hashCode = hashCode * 31 + mToCurrency.hashCode();
        hashCode = hashCode * 31 + mToAccountId.hashCode();
        hashCode = hashCode * 31 + (mReturnTransactionId == null ? 0 : mReturnTransactionId.hashCode());
        hashCode = hashCode * 31 + (mAmount.hashCode());
        hashCode = hashCode * 31 + (mOutgoingTransactionFee == null ? 0 : mOutgoingTransactionFee.hashCode());
        hashCode = hashCode * 31 + (mReturnAmount.hashCode());
        hashCode = hashCode * 31 + (mExchangeFee.hashCode());
        hashCode = hashCode * 31 + (mReturnTransactionFee.hashCode());
        hashCode = hashCode * 31 + mExchangeRate.hashCode();
        hashCode = hashCode * 31 + mExchangeSetting.hashCode();
        hashCode = hashCode * 31 + mExchangeRates.hashCode();
        hashCode = hashCode * 31 + (mNonce == null ? 0 : mNonce.hashCode());
        hashCode = hashCode * 31 + (mSubmittedAt == null ? 0 : mSubmittedAt.hashCode());
        hashCode = hashCode * 31 + (mConfirmedAt == null ? 0 : mConfirmedAt.hashCode());
        return hashCode;
    }

    @Override
    public String toString() {
        return "Exchange{" +
                "mId=" + mId +
                "," + "mStatus=" + mStatus +
                "," + "mFromCurrency=" + mFromCurrency +
                "," + "mFromAccountId=" + mFromAccountId +
                "," + "mOutgoingTransactionId=" + mOutgoingTransactionId +
                "," + "mToCurrency=" + mToCurrency +
                "," + "mToAccountId=" + mToAccountId +
                "," + "mReturnTransactionId=" + mReturnTransactionId +
                "," + "mAmount=" + mAmount +
                "," + "mOutgoingTransactionFee=" + mOutgoingTransactionFee +
                "," + "mReturnAmount=" + mReturnAmount +
                "," + "mExchangeFee=" + mExchangeFee +
                "," + "mReturnTransactionFee=" + mReturnTransactionFee +
                "," + "mExchangeRate=" + mExchangeRate +
                "," + "mExchangeSetting=" + mExchangeSetting +
                "," + "mExchangeRates=" + mExchangeRates +
                "," + "mNonce=" + mNonce +
                "," + "mSubmittedAt=" + mSubmittedAt +
                "," + "mConfirmedAt=" + mConfirmedAt +
        "}";
    }

}
