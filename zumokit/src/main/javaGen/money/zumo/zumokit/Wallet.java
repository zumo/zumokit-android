// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from wallet.djinni

package money.zumo.zumokit;

import java.util.concurrent.atomic.AtomicBoolean;

/**
 * User wallet provides methods for transfer and exchange of fiat and cryptocurrency funds.
 * Sending a transaction or making an exchange is a two step process. First a transaction or
 * exchange has to be composed via one of the compose methods, then {@link  ComposedTransaction ComposedTransaction} or
 * {@link  ComposedExchange ComposedExchange} can be submitted.
 * <p>
 * User wallet instance can be obtained by creating, unlocking or recovering user wallet via {@link  User User} instance.
 */
public interface Wallet {
    /**
     * Compose Bitcoin transaction asynchronously. Refer to <a target="_top" href="https://developers.zumo.money/docs/guides/send-transactions#bitcoin">Send Transactions</a> guide for usage details.
     * <p>
     * On success {@link  ComposedTransaction ComposedTransaction}  is returned via callback.
     *
     * @param fromAccountId   {@link  Account Account} identifier
     * @param changeAccountId change {@link  Account Account} identifier, which can be the same as fromAccountId
     * @param destination       destination wallet address
     * @param amount            amount in BTC
     * @param feeRate          fee rate in satoshis/byte
     * @param sendMax          send maximum possible funds to destination
     * @param callback          an interface to receive the result or error
     */
    public void composeBtcTransaction(String fromAccountId, String changeAccountId, String destination, java.math.BigDecimal amount, java.math.BigDecimal feeRate, boolean sendMax, ComposeTransactionCallback callback);

    /**
     * Compose Ethereum transaction asynchronously. Refer to <a target="_top" href="https://developers.zumo.money/docs/guides/send-transactions#ethereum">Send Transactions</a> guide for usage details.
     * <p>
     * On success {@link  ComposedTransaction ComposedTransaction} is returned via callback.
     *
     * @param fromAccountId {@link  Account Account} identifier
     * @param gasPrice       gas price in gwei
     * @param gasLimit       gas limit
     * @param destination     destination wallet address
     * @param amount          amount in ETH
     * @param data            data in string format or null
     * @param nonce           next transaction nonce or null
     * @param sendMax        send maximum possible funds to destination
     * @param callback        an interface to receive the result or error
     */
    public void composeEthTransaction(String fromAccountId, java.math.BigDecimal gasPrice, java.math.BigDecimal gasLimit, String destination, java.math.BigDecimal amount, String data, Long nonce, boolean sendMax, ComposeTransactionCallback callback);

    /**
     * Compose fiat transaction between users in Zumo ecosystem asynchronously. Refer to <a target="_top" href="https://developers.zumo.money/docs/guides/send-transactions#internal-fiat-transaction">Send Transactions</a> guide for usage details.
     * <p>
     * On success {@link  ComposedTransaction ComposedTransaction} is returned via callback.
     *
     * @param fromAccountId {@link  Account Account} identifier
     * @param toAccountId   {@link  Account Account} identifier
     * @param amount          amount in source account currency
     * @param sendMax        send maximum possible funds to destination
     * @param callback        an interface to receive the result or error
     */
    public void composeInternalFiatTransaction(String fromAccountId, String toAccountId, java.math.BigDecimal amount, boolean sendMax, ComposeTransactionCallback callback);

    /**
     * Compose transaction to nominated account asynchronously. Refer to <a target="_top" href="https://developers.zumo.money/docs/guides/send-transactions#external-fiat-transaction">Send Transactions</a> guide for usage details.
     * <p>
     * On success {@link  ComposedTransaction ComposedTransaction} object is returned via callback.
     *
     * @param fromAccountId {@link  Account Account} identifier
     * @param amount          amount in source account currency
     * @param sendMax        send maximum possible funds to destination
     * @param callback        an interface to receive the result or error
     */
    public void composeTransactionToNominatedAccount(String fromAccountId, java.math.BigDecimal amount, boolean sendMax, ComposeTransactionCallback callback);

    /**
     * Submit a transaction asynchronously. Refer to <a target="_top" href="https://developers.zumo.money/docs/guides/send-transactions#submit-transaction">Send Transactions</a> guide for usage details.
     * <p>
     * On success {@link  Transaction Transaction} object is returned via callback.
     *
     * @param composedTransaction Composed transaction retrieved as a result
     *                             of one of the compose transaction methods
     * @param callback An interface to receive the result or error
     */
    public void submitTransaction(ComposedTransaction composedTransaction, SubmitTransactionCallback callback);

    /**
     * Compose Bitcoin transaction asynchronously. Refer to <a target="_top" href="https://developers.zumo.money/docs/guides/make-exchanges#compose-exchange">Make Exchanges</a> guide for usage details.
     * <p>
     * On success {@link  ComposedExchange ComposedExchange}  is returned via callback.
     *
     * @param depositAccountId  {@link  Account Account} identifier
     * @param withdrawAccountId {@link  Account Account} identifier
     * @param exchangeRate       Zumo exchange rate obtained from ZumoKit state
     * @param exchangeSettings   Zumo exchange settings obtained from ZumoKit state
     * @param amount              amount in deposit account currency
     * @param sendMax            exchange maximum possible funds
     * @param callback            an interface to receive the result or error
     */
    public void composeExchange(String depositAccountId, String withdrawAccountId, ExchangeRate exchangeRate, ExchangeSettings exchangeSettings, java.math.BigDecimal amount, boolean sendMax, ComposeExchangeCallback callback);

    /**
     * Submit an exchange asynchronously. <a target="_top" href="https://developers.zumo.money/docs/guides/make-exchanges#submit-exchange">Make Exchanges</a> guide for usage details.
     * <p>
     * On success {@link  Exchange Exchange} object is returned via callback.
     *
     * @param composedExchange Composed exchange retrieved as the result
     *                          of <code>composeExchange</code> method
     * @param callback An interface to receive the result or error
     */
    public void submitExchange(ComposedExchange composedExchange, SubmitExchangeCallback callback);

    static final class CppProxy implements Wallet
    {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
        }

        private native void nativeDestroy(long nativeRef);
        public void _djinni_private_destroy()
        {
            boolean destroyed = this.destroyed.getAndSet(true);
            if (!destroyed) nativeDestroy(this.nativeRef);
        }
        protected void finalize() throws java.lang.Throwable
        {
            _djinni_private_destroy();
            super.finalize();
        }

        @Override
        public void composeBtcTransaction(String fromAccountId, String changeAccountId, String destination, java.math.BigDecimal amount, java.math.BigDecimal feeRate, boolean sendMax, ComposeTransactionCallback callback)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_composeBtcTransaction(this.nativeRef, fromAccountId, changeAccountId, destination, amount, feeRate, sendMax, callback);
        }
        private native void native_composeBtcTransaction(long _nativeRef, String fromAccountId, String changeAccountId, String destination, java.math.BigDecimal amount, java.math.BigDecimal feeRate, boolean sendMax, ComposeTransactionCallback callback);

        @Override
        public void composeEthTransaction(String fromAccountId, java.math.BigDecimal gasPrice, java.math.BigDecimal gasLimit, String destination, java.math.BigDecimal amount, String data, Long nonce, boolean sendMax, ComposeTransactionCallback callback)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_composeEthTransaction(this.nativeRef, fromAccountId, gasPrice, gasLimit, destination, amount, data, nonce, sendMax, callback);
        }
        private native void native_composeEthTransaction(long _nativeRef, String fromAccountId, java.math.BigDecimal gasPrice, java.math.BigDecimal gasLimit, String destination, java.math.BigDecimal amount, String data, Long nonce, boolean sendMax, ComposeTransactionCallback callback);

        @Override
        public void composeInternalFiatTransaction(String fromAccountId, String toAccountId, java.math.BigDecimal amount, boolean sendMax, ComposeTransactionCallback callback)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_composeInternalFiatTransaction(this.nativeRef, fromAccountId, toAccountId, amount, sendMax, callback);
        }
        private native void native_composeInternalFiatTransaction(long _nativeRef, String fromAccountId, String toAccountId, java.math.BigDecimal amount, boolean sendMax, ComposeTransactionCallback callback);

        @Override
        public void composeTransactionToNominatedAccount(String fromAccountId, java.math.BigDecimal amount, boolean sendMax, ComposeTransactionCallback callback)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_composeTransactionToNominatedAccount(this.nativeRef, fromAccountId, amount, sendMax, callback);
        }
        private native void native_composeTransactionToNominatedAccount(long _nativeRef, String fromAccountId, java.math.BigDecimal amount, boolean sendMax, ComposeTransactionCallback callback);

        @Override
        public void submitTransaction(ComposedTransaction composedTransaction, SubmitTransactionCallback callback)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_submitTransaction(this.nativeRef, composedTransaction, callback);
        }
        private native void native_submitTransaction(long _nativeRef, ComposedTransaction composedTransaction, SubmitTransactionCallback callback);

        @Override
        public void composeExchange(String depositAccountId, String withdrawAccountId, ExchangeRate exchangeRate, ExchangeSettings exchangeSettings, java.math.BigDecimal amount, boolean sendMax, ComposeExchangeCallback callback)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_composeExchange(this.nativeRef, depositAccountId, withdrawAccountId, exchangeRate, exchangeSettings, amount, sendMax, callback);
        }
        private native void native_composeExchange(long _nativeRef, String depositAccountId, String withdrawAccountId, ExchangeRate exchangeRate, ExchangeSettings exchangeSettings, java.math.BigDecimal amount, boolean sendMax, ComposeExchangeCallback callback);

        @Override
        public void submitExchange(ComposedExchange composedExchange, SubmitExchangeCallback callback)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_submitExchange(this.nativeRef, composedExchange, callback);
        }
        private native void native_submitExchange(long _nativeRef, ComposedExchange composedExchange, SubmitExchangeCallback callback);
    }
}
